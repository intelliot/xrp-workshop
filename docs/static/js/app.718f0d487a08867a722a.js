webpackJsonp([1],{"+NP1":function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"submit",type:"object",properties:{resultCode:{type:"string",description:"Deprecated: Use `engine_result` instead."},resultMessage:{type:"string",description:"Deprecated: Use `engine_result_message` instead."},engine_result:{type:"string",description:"Code indicating the preliminary result of the transaction, for example `tesSUCCESS`. [List of transaction responses](https://developers.ripple.com/transaction-results.html)"},engine_result_code:{type:"integer",description:"Numeric code indicating the preliminary result of the transaction, directly correlated to `engine_result`"},engine_result_message:{type:"string",description:"Human-readable explanation of the transaction's preliminary result."},tx_blob:{type:"string",description:"The complete transaction in hex string format."},tx_json:{$ref:"tx-json",description:"The complete transaction in JSON format."}},required:["resultCode","resultMessage","engine_result","engine_result_code","engine_result_message","tx_blob","tx_json"],additionalProperties:!1}},"+rGa":function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"orderbook",type:"object",properties:{base:{$ref:"issue"},counter:{$ref:"issue"}},required:["base","counter"],additionalProperties:!1}},"/613":function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"transactionHash",link:"transaction-id",description:"A hash of a transaction used to identify the transaction, represented in hexadecimal.",type:"string",pattern:"^[A-F0-9]{64}$"}},0:function(e,t){},1:function(e,t){},10:function(e,t){},11:function(e,t){},"1I24":function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"tag",description:"An arbitrary 32-bit unsigned integer. It typically maps to an off-ledger account; for example, a hosted wallet or exchange account.",type:"integer",$ref:"uint32"}},"1TG1":function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"outcome",type:"object",description:"The outcome of the transaction (what effects it had).",properties:{result:{type:"string",description:"Result code returned by rippled. See [Transaction Results](https://developers.ripple.com/transaction-results.html) for a complete list."},timestamp:{type:"string",format:"date-time",description:"The timestamp when the transaction was validated. (May be missing when requesting transactions in binary mode.)"},fee:{$ref:"value",description:"The XRP fee that was charged for the transaction."},deliveredAmount:{$ref:"amount",description:"For payment transactions, it is impossible to reliably compute the actual delivered amount from the balanceChanges due to fixed precision. If the payment is not a partial payment and the transaction succeeded, the deliveredAmount should always be considered to be the amount specified in the transaction."},balanceChanges:{type:"object",additionalProperties:{type:"array",description:"Key is the XRP Ledger address; value is an array of signed amounts representing changes of balances for that address.",items:{$ref:"balance"}}},orderbookChanges:{type:"object",additionalProperties:{type:"array",description:"Key is the maker's XRP Ledger address; value is an array of changes",items:{$ref:"orderChange"}}},channelChanges:{type:"object",description:"Properties reflecting the details of the payment channel."},ledgerVersion:{$ref:"ledgerVersion",description:"The ledger version that the transaction was validated in."},indexInLedger:{type:"integer",minimum:0,description:"The ordering index of the transaction in the ledger."}},required:["result","fee","balanceChanges","orderbookChanges","ledgerVersion","indexInLedger"],additionalProperties:!1}},2:function(e,t){},"2qA4":function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"prepare",description:"Result of prepare function",type:"object",properties:{txJSON:{type:"string",description:"The prepared transaction in rippled JSON format."},instructions:{description:"The instructions for how to execute the transaction after adding automatic defaults.",type:"object",properties:{fee:{$ref:"value",description:"The fee to pay for the transaction. See [Transaction Fees](#transaction-fees) for more information. For multi-signed transactions, this fee will be multiplied by (N+1), where N is the number of signatures you plan to provide."},sequence:{$ref:"sequence",description:"The initiating account's sequence number for this transaction."},maxLedgerVersion:{oneOf:[{$ref:"ledgerVersion"},{type:"null"}],description:"The highest ledger version that the transaction can be included in. Set to `null` if there is no maximum. If not null, this must be an integer greater than 0, or one of the following strings: 'validated', 'closed', 'current'."}},additionalProperties:!1,required:["fee","sequence","maxLedgerVersion"]}},additionalProperties:!1,required:["txJSON","instructions"]}},"2vGi":function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"prepareEscrowCancellationParameters",type:"object",properties:{address:{$ref:"address",description:"The address of the account that is creating the transaction."},escrowCancellation:{$ref:"escrowCancellation",description:"The specification of the escrow cancellation to prepare."},instructions:{$ref:"instructions"}},additionalProperties:!1,required:["address","escrowCancellation"]}},3:function(e,t){},"3ZMV":function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"sourceExactAdjustment",type:"object",properties:{address:{$ref:"address",description:"The address to send from."},amount:{$ref:"laxAmount",description:"An exact amount to send. If the counterparty is not specified, amounts with any counterparty may be used. (This field cannot be used with source.maxAmount)"},tag:{$ref:"tag"}},required:["address","amount"],additionalProperties:!1}},"3x7H":function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"prepareSettingsParameters",type:"object",properties:{address:{$ref:"address",description:"The address of the account that is creating the transaction."},settings:{$ref:"settings",description:"The specification of the settings to prepare."},instructions:{$ref:"instructions"}},additionalProperties:!1,required:["address","settings"]}},4:function(e,t){},"4/Aq":function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"prepareCheckCashParameters",type:"object",properties:{address:{$ref:"address",description:"The address of the account that is creating the transaction."},checkCash:{$ref:"checkCash",description:"The specification of the Check cash to prepare."},instructions:{$ref:"instructions"}},additionalProperties:!1,required:["address","checkCash"]}},"4/hK":function(e,t){},"4Vh3":function(e,t){e.exports={modp1:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"},modp2:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"},modp5:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"},modp14:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"},modp15:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"},modp16:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"},modp17:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"},modp18:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"}}},"4cZl":function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"combineParameters",type:"object",properties:{signedTransactions:{type:"array",description:"An array of signed transactions (from the output of [sign](#sign)) to combine.",items:{type:"string",pattern:"^[A-F0-9]+$",description:"A single-signed transaction represented as an uppercase hexadecimal string (from the output of [sign](#sign))"},minLength:1}},additionalProperties:!1,required:["signedTransactions"]}},"4mMT":function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"getTrustlinesParameters",description:"Parameters for getTrustlines",type:"object",properties:{address:{$ref:"address",description:"The address of the account to get trustlines for."},options:{description:"Options to filter and determine which trustlines to return.",properties:{counterparty:{$ref:"address",description:"Only return trustlines with this counterparty."},currency:{$ref:"currency",description:"Only return trustlines for this currency."},limit:{type:"integer",minimum:1,description:"Return at most this many trustlines."},ledgerVersion:{$ref:"ledgerVersion",description:"Return trustlines as they were in this historical ledger version."}},additionalProperties:!1}},additionalProperties:!1,required:["address"]}},5:function(e,t){},"5/oD":function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"getPathsParameters",type:"object",properties:{pathfind:{description:"Specification of a pathfind request.",properties:{source:{description:"Properties of the source of funds.",type:"object",properties:{address:{$ref:"address",description:"The XRP Ledger address of the account where funds will come from."},amount:{$ref:"laxAmount",description:"The amount of funds to send."},currencies:{description:"An array of currencies (with optional counterparty) that may be used in the payment paths.",type:"array",items:{description:"A currency with optional counterparty.",type:"object",properties:{currency:{$ref:"currency"},counterparty:{$ref:"address",description:"The counterparty for the currency; if omitted any counterparty may be used."}},required:["currency"],additionalProperties:!1},uniqueItems:!0}},not:{required:["amount","currencies"]},additionalProperties:!1,required:["address"]},destination:{description:"Properties of the destination of funds.",type:"object",properties:{address:{$ref:"address",description:"An address representing the destination of the transaction."},amount:{$ref:"laxLaxAmount",description:"The amount to be received by the receiver (`value` may be ommitted if a source amount is specified)."}},required:["address","amount"],additionalProperties:!1}},required:["source","destination"],additionalProperties:!1}},additionalProperties:!1,required:["pathfind"]}},"5F4h":function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"accountDelete",link:"account-delete",type:"object",properties:{destination:{$ref:"address",description:"Address of an account to receive any leftover XRP after deleting the sending account. Must be a funded account in the ledger, and must not be the sending account."},destinationTag:{$ref:"tag",description:"(Optional) Arbitrary destination tag that identifies a hosted recipient or other information for the recipient of the deleted account's leftover XRP."},destinationXAddress:{$ref:"address",description:"X-address of an account to receive any leftover XRP after deleting the sending account. Must be a funded account in the ledger, and must not be the sending account."}},anyOf:[{required:["destination"]},{required:["destinationXAddress"]}],additionalProperties:!1}},6:function(e,t){},"6OS5":function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"hash128",description:"The hexadecimal representation of a 128-bit hash",type:"string",pattern:"^[A-F0-9]{32}$"}},"6ZSt":function(e,t){e.exports={"aes-128-ecb":{cipher:"AES",key:128,iv:0,mode:"ECB",type:"block"},"aes-192-ecb":{cipher:"AES",key:192,iv:0,mode:"ECB",type:"block"},"aes-256-ecb":{cipher:"AES",key:256,iv:0,mode:"ECB",type:"block"},"aes-128-cbc":{cipher:"AES",key:128,iv:16,mode:"CBC",type:"block"},"aes-192-cbc":{cipher:"AES",key:192,iv:16,mode:"CBC",type:"block"},"aes-256-cbc":{cipher:"AES",key:256,iv:16,mode:"CBC",type:"block"},aes128:{cipher:"AES",key:128,iv:16,mode:"CBC",type:"block"},aes192:{cipher:"AES",key:192,iv:16,mode:"CBC",type:"block"},aes256:{cipher:"AES",key:256,iv:16,mode:"CBC",type:"block"},"aes-128-cfb":{cipher:"AES",key:128,iv:16,mode:"CFB",type:"stream"},"aes-192-cfb":{cipher:"AES",key:192,iv:16,mode:"CFB",type:"stream"},"aes-256-cfb":{cipher:"AES",key:256,iv:16,mode:"CFB",type:"stream"},"aes-128-cfb8":{cipher:"AES",key:128,iv:16,mode:"CFB8",type:"stream"},"aes-192-cfb8":{cipher:"AES",key:192,iv:16,mode:"CFB8",type:"stream"},"aes-256-cfb8":{cipher:"AES",key:256,iv:16,mode:"CFB8",type:"stream"},"aes-128-cfb1":{cipher:"AES",key:128,iv:16,mode:"CFB1",type:"stream"},"aes-192-cfb1":{cipher:"AES",key:192,iv:16,mode:"CFB1",type:"stream"},"aes-256-cfb1":{cipher:"AES",key:256,iv:16,mode:"CFB1",type:"stream"},"aes-128-ofb":{cipher:"AES",key:128,iv:16,mode:"OFB",type:"stream"},"aes-192-ofb":{cipher:"AES",key:192,iv:16,mode:"OFB",type:"stream"},"aes-256-ofb":{cipher:"AES",key:256,iv:16,mode:"OFB",type:"stream"},"aes-128-ctr":{cipher:"AES",key:128,iv:16,mode:"CTR",type:"stream"},"aes-192-ctr":{cipher:"AES",key:192,iv:16,mode:"CTR",type:"stream"},"aes-256-ctr":{cipher:"AES",key:256,iv:16,mode:"CTR",type:"stream"},"aes-128-gcm":{cipher:"AES",key:128,iv:12,mode:"GCM",type:"auth"},"aes-192-gcm":{cipher:"AES",key:192,iv:12,mode:"GCM",type:"auth"},"aes-256-gcm":{cipher:"AES",key:256,iv:12,mode:"GCM",type:"auth"}}},7:function(e,t){},"7+f7":function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"destinationExactAdjustment",type:"object",properties:{address:{$ref:"address",description:"An address representing the destination of the transaction."},amount:{$ref:"laxAmount",description:"An exact amount to deliver to the recipient. If the counterparty is not specified, amounts with any counterparty may be used. (This field cannot be used with `destination.minAmount`.)"},tag:{$ref:"tag"}},required:["address","amount"],additionalProperties:!1}},8:function(e,t){},"82on":function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"xAddress",description:"An XRP Ledger address in X-address format",type:"string",format:"xAddress",link:"x-address",pattern:"^[XT][1-9A-HJ-NP-Za-km-z]{46}$"}},"8Kg1":function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"settings",link:"settings",$ref:"settingsPlusMemos",oneOf:[{required:["memos"],minProperties:2,maxProperties:2},{not:{required:["memos"]},minProperties:1,maxProperties:1}]}},"8YCc":function(e,t){e.exports={"2.16.840.1.101.3.4.1.1":"aes-128-ecb","2.16.840.1.101.3.4.1.2":"aes-128-cbc","2.16.840.1.101.3.4.1.3":"aes-128-ofb","2.16.840.1.101.3.4.1.4":"aes-128-cfb","2.16.840.1.101.3.4.1.21":"aes-192-ecb","2.16.840.1.101.3.4.1.22":"aes-192-cbc","2.16.840.1.101.3.4.1.23":"aes-192-ofb","2.16.840.1.101.3.4.1.24":"aes-192-cfb","2.16.840.1.101.3.4.1.41":"aes-256-ecb","2.16.840.1.101.3.4.1.42":"aes-256-cbc","2.16.840.1.101.3.4.1.43":"aes-256-ofb","2.16.840.1.101.3.4.1.44":"aes-256-cfb"}},"8cU3":function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"adjustment",type:"object",properties:{address:{$ref:"address"},amount:{$ref:"amount"},tag:{$ref:"tag"}},required:["address","amount"],additionalProperties:!1}},"8hnA":function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"destinationAdjustment",type:"object",oneOf:[{$ref:"destinationExactAdjustment"},{$ref:"minAdjustment"}]}},9:function(e,t){},A8LY:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"hash256",description:"The hexadecimal representation of a 256-bit hash",type:"string",pattern:"^[A-F0-9]{64}$"}},ALps:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"getLedgerParameters",description:"Parameters for getLedger",type:"object",properties:{options:{description:"Options affecting what ledger and how much data to return.",properties:{ledgerHash:{type:"string",description:"Get ledger data for this historical ledger hash."},ledgerVersion:{$ref:"ledgerVersion",description:"Get ledger data for this historical ledger version."},includeAllData:{type:"boolean",description:"Include full transactions and/or state information if `includeTransactions` and/or `includeState` is set."},includeTransactions:{type:"boolean",description:"Return an array of hashes for each transaction or an array of all transactions that were validated in this ledger version, depending on whether `includeAllData` is set."},includeState:{type:"boolean",description:"Return an array of hashes for all state data or an array of all state data in this ledger version, depending on whether `includeAllData` is set."}},additionalProperties:!1}},additionalProperties:!1}},ARMw:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"amountbase",description:"Base class for amount and issue",type:"object",properties:{value:{description:"The quantity of the currency, denoted as a string to retain floating point precision",$ref:"value"},currency:{description:'The three-character code or hexadecimal string used to denote currencies, or "drops" for the smallest unit of XRP.',$ref:"currency"},counterparty:{description:'The XRP Ledger address of the account that owes or is owed the funds (omitted if `currency` is "XRP" or "drops")',$ref:"address"}},additionalProperties:!1,required:["currency"],oneOf:[{properties:{currency:{not:{enum:["XRP","drops"]}}},required:["counterparty"]},{properties:{currency:{enum:["XRP","drops"]}},not:{required:["counterparty"]}}]}},AjCx:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"depositPreauth",link:"deposit-preauth",type:"object",properties:{authorize:{$ref:"address",description:"Address of the account that can cash the check."},unauthorize:{$ref:"address",description:"Address of the account that can cash the check."}},oneOf:[{required:["authorize"]},{required:["unauthorize"]}],additionalProperties:!1}},BDLV:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"laxLaxAmount",description:"Amount where counterparty and value are optional",link:"amount",type:"object",properties:{currency:{$ref:"currency"},counterparty:{$ref:"address"},value:{$ref:"value"}},required:["currency"],additionalProperties:!1}},BUIJ:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"ledgerVersion",description:"A ledger version number",oneOf:[{type:"integer",minimum:1},{type:"string",enum:["validated","closed","current"]}]}},Bm2t:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"getTransactionParameters",description:"Parameters for getTransaction",type:"object",properties:{id:{$ref:"transactionHash"},options:{description:"Options to limit the ledger versions to search and/or to include raw transaction data.",properties:{minLedgerVersion:{$ref:"ledgerVersion",description:"The lowest ledger version to search. This must be an integer greater than 0, or one of the following strings: 'validated', 'closed', 'current'."},maxLedgerVersion:{$ref:"ledgerVersion",description:"The highest ledger version to search. This must be an integer greater than 0, or one of the following strings: 'validated', 'closed', 'current'."},includeRawTransaction:{description:"Include raw transaction data. For advanced users; exercise caution when interpreting this data."}},additionalProperties:!1}},additionalProperties:!1,required:["id"]}},CLsF:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"preparePaymentParameters",type:"object",properties:{address:{$ref:"address",description:"The address of the account that is creating the transaction."},payment:{$ref:"payment",description:"The specification of the payment to prepare."},instructions:{$ref:"instructions"}},additionalProperties:!1,required:["address","payment"]}},D1nC:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"computeLedgerHashParameters",type:"object",properties:{ledger:{$ref:"getLedger",description:"The ledger header to hash."}},additionalProperties:!1,required:["ledger"]}},Dhd5:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"prepareEscrowCreationParameters",type:"object",properties:{address:{$ref:"address",description:"The address of the account that is creating the transaction."},escrowCreation:{$ref:"escrowCreation",description:"The specification of the escrow creation to prepare."},instructions:{$ref:"instructions"}},additionalProperties:!1,required:["address","escrowCreation"]}},EFKw:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"settingsPlusMemos",type:"object",properties:{defaultRipple:{type:"boolean",description:"Enable [rippling](https://ripple.com/build/understanding-the-noripple-flag/) on this account’s trust lines by default. (New in [rippled 0.27.3](https://github.com/ripple/rippled/releases/tag/0.27.3))"},depositAuth:{type:"boolean",description:"Enable [Deposit Authorization](https://ripple.com/build/deposit-authorization/) on this account. If set, transactions cannot send value of any kind to this account unless the sender of those transactions is the account itself. (Requires the [DepositAuth amendment](https://ripple.com/build/known-amendments/#depositauth))"},disableMasterKey:{type:"boolean",description:"Disallows use of the master key to sign transactions for this account. To disable the master key, you must authorize the transaction by signing it with the master key pair. You cannot use a regular key pair or a multi-signature. You can re-enable the master key pair using a regular key pair or multi-signature. See [AccountSet](https://developers.ripple.com/accountset.html)."},disallowIncomingXRP:{type:"boolean",description:"Indicates that client applications should not send XRP to this account. Not enforced by rippled."},domain:{type:"string",description:"The domain that owns this account, as a hexadecimal string representing the ASCII for the domain in lowercase."},emailHash:{description:"Hash of an email address to be used for generating an avatar image. Conventionally, clients use Gravatar to display this image. Use `null` to clear.",oneOf:[{type:"null"},{$ref:"hash128"}]},walletLocator:{description:"Transaction hash or any other 64 character hexadecimal string, that may or may not represent the result of a hash operation. Use `null` to clear.",oneOf:[{type:"null"},{$ref:"hash256"}]},enableTransactionIDTracking:{type:"boolean",description:"Track the ID of this account’s most recent transaction."},globalFreeze:{type:"boolean",description:"Freeze all assets issued by this account."},memos:{$ref:"memos"},messageKey:{type:"string",description:"Public key for sending encrypted messages to this account. Conventionally, it should be a secp256k1 key, the same encryption that is used by the rest of Ripple."},noFreeze:{type:"boolean",description:"Permanently give up the ability to freeze individual trust lines. This flag can never be disabled after being enabled."},passwordSpent:{type:"boolean",description:"Indicates that the account has used its free SetRegularKey transaction."},regularKey:{oneOf:[{$ref:"address"},{type:"null"}],description:"The public key of a new keypair, to use as the regular key to this account, as a base-58-encoded string in the same format as an account address. Use `null` to remove the regular key."},requireAuthorization:{type:"boolean",description:"If set, this account must individually approve other users in order for those users to hold this account’s issuances."},requireDestinationTag:{type:"boolean",description:"Requires incoming payments to specify a destination tag."},signers:{type:"object",description:"Settings that determine what sets of accounts can be used to sign a transaction on behalf of this account using multisigning.",properties:{threshold:{$ref:"uint32",description:"A target number for the signer weights. A multi-signature from this list is valid only if the sum weights of the signatures provided is equal or greater than this value. To delete the signers setting, use the value `0`."},weights:{type:"array",description:"Weights of signatures for each signer.",items:{type:"object",description:"An association of an address and a weight.",properties:{address:{$ref:"address"},weight:{$ref:"uint32",description:"The weight that the signature of this account counts as towards the threshold."}},required:["address","weight"],additionalProperties:!1},minItems:1,maxItems:8}},required:["threshold"],additionalProperties:!1},transferRate:{description:"The fee to charge when users transfer this account’s issuances, as the decimal amount that must be sent to deliver 1 unit. Has precision up to 9 digits beyond the decimal point. Use `null` to set no fee.",oneOf:[{type:"null"},{type:"number",minimum:1,maximum:4.294967295}]},tickSize:{description:"Tick size to use for offers involving a currency issued by this address. The exchange rates of those offers is rounded to this many significant digits. Valid values are 3 to 15 inclusive, or 0 to disable.",enum:[0,3,4,5,6,7,8,9,10,11,12,13,14,15]}},additionalProperties:!1}},"F/6a":function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"verifyPaymentChannelClaim",type:"boolean",additionalProperties:!1}},F4kn:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"sign",type:"object",properties:{signedTransaction:{type:"string",pattern:"^[A-F0-9]+$",description:"The signed transaction represented as an uppercase hexadecimal string."},id:{$ref:"transactionHash",description:"The [Transaction ID](#transaction-id) of the signed transaction."}},required:["signedTransaction","id"],additionalProperties:!1}},GGk8:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"preparePaymentChannelCreateParameters",type:"object",properties:{address:{$ref:"address",description:"The address of the account that is creating the transaction."},paymentChannelCreate:{$ref:"paymentChannelCreate",description:"The specification of the payment channel to create."},instructions:{$ref:"instructions"}},additionalProperties:!1,required:["address","paymentChannelCreate"]}},GQkN:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"submitParameters",type:"object",properties:{signedTransaction:{$ref:"blob",description:"A signed transaction as returned by [sign](#sign)."},failHard:{type:"boolean",description:"If `true`, and the transaction fails locally, do not retry or relay the transaction to other servers. Defaults to `false`."}},additionalProperties:!1,required:["signedTransaction"]}},HBHS:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"getTransactions",type:"array",items:{$ref:"getTransaction"}}},HrOD:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"getAccountObjectsOptions",description:"Request options for getAccountObjects",type:"object",properties:{address:{$ref:"address",description:"The address of the account to get the account objects of."},options:{description:"Options that affect what to return.",properties:{type:{type:"string",enum:["check","escrow","offer","payment_channel","signer_list","state"],description:"(Optional) Filter results to include only this type of ledger object. The valid types are: `check`, `escrow`, `offer`, `payment_channel`, `signer_list`, and `state` (trust line)."},ledgerHash:{type:"string",description:"(Optional) A 20-byte hex string for the ledger version to use."},ledgerIndex:{oneOf:[{$ref:"ledgerVersion"},{type:"string"}],description:"(Optional) The sequence number of the ledger to use, or a shortcut string to choose a ledger automatically."},limit:{type:"integer",minimum:1,description:"(Optional) The maximum number of objects to include in the results."}},additionalProperties:!1}},required:["address"],additionalProperties:!1}},IG1h:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"checkCreate",link:"check-create",type:"object",properties:{destination:{$ref:"address",description:"Address of the account that can cash the check."},sendMax:{$ref:"laxAmount",description:"Amount of source currency the check is allowed to debit the sender, including transfer fees on non-XRP currencies."},destinationTag:{$ref:"tag",description:"Destination tag that identifies the reason for the check, or a hosted recipient to pay."},expiration:{type:"string",format:"date-time",description:"Time after which the check is no longer valid."},invoiceID:{$ref:"hash256",description:"256-bit hash, as a 64-character hexadecimal string, representing a specific reason or identifier for this check."}},required:["destination","sendMax"],additionalProperties:!1}},Jgsh:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"blob",description:"An uppercase hexadecimal string representation of a transaction",type:"string",minLength:1,pattern:"^[0-9A-F]*$"}},K7Uy:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"getPaths",type:"array",items:{type:"object",properties:{source:{$ref:"sourceAdjustment",description:"Properties of the source of the payment."},destination:{$ref:"destinationAdjustment",description:"Properties of the destination of the payment."},paths:{type:"string",description:"The paths of trustlines and orders to use in executing the payment."}},required:["source","destination","paths"],additionalProperties:!1}}},KYqO:function(e,t){e.exports={name:"elliptic",version:"6.5.2",description:"EC cryptography",main:"lib/elliptic.js",files:["lib"],scripts:{jscs:"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",jshint:"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",lint:"npm run jscs && npm run jshint",unit:"istanbul test _mocha --reporter=spec test/index.js",test:"npm run lint && npm run unit",version:"grunt dist && git add dist/"},repository:{type:"git",url:"git@github.com:indutny/elliptic"},keywords:["EC","Elliptic","curve","Cryptography"],author:"Fedor Indutny <fedor@indutny.com>",license:"MIT",bugs:{url:"https://github.com/indutny/elliptic/issues"},homepage:"https://github.com/indutny/elliptic",devDependencies:{brfs:"^1.4.3",coveralls:"^3.0.8",grunt:"^1.0.4","grunt-browserify":"^5.0.0","grunt-cli":"^1.2.0","grunt-contrib-connect":"^1.0.0","grunt-contrib-copy":"^1.0.0","grunt-contrib-uglify":"^1.0.1","grunt-mocha-istanbul":"^3.0.1","grunt-saucelabs":"^9.0.1",istanbul:"^0.4.2",jscs:"^3.0.7",jshint:"^2.10.3",mocha:"^6.2.2"},dependencies:{"bn.js":"^4.4.0",brorand:"^1.0.1","hash.js":"^1.0.0","hmac-drbg":"^1.0.0",inherits:"^2.0.1","minimalistic-assert":"^1.0.0","minimalistic-crypto-utils":"^1.0.0"}}},KtzU:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"instructions",link:"transaction-instructions",description:"Instructions for executing the transaction",type:"object",properties:{sequence:{description:"The initiating account's sequence number for this transaction.",$ref:"sequence"},fee:{description:"An exact fee to pay for the transaction, before multiplying for multi-signed transactions. See [Transaction Fees](#transaction-fees) for more information.",$ref:"value"},maxFee:{description:"Deprecated: Use `maxFeeXRP` in the RippleAPI constructor instead. The maximum fee to pay for this transaction. If this exceeds `maxFeeXRP`, `maxFeeXRP` will be used instead. See [Transaction Fees](#transaction-fees) for more information.",$ref:"value"},maxLedgerVersion:{description:"The highest ledger version that the transaction can be included in. If this option and `maxLedgerVersionOffset` are both omitted, the `maxLedgerVersion` option will default to 3 greater than the current validated ledger version (equivalent to `maxLedgerVersionOffset=3`). Use `null` to not set a maximum ledger version. If not null, this must be an integer greater than 0, or one of the following strings: 'validated', 'closed', 'current'.",oneOf:[{$ref:"ledgerVersion"},{type:"null"}]},maxLedgerVersionOffset:{description:"Offset from current validated ledger version to highest ledger version that the transaction can be included in.",type:"integer",minimum:0},signersCount:{description:"Number of signers that will be signing this transaction.",type:"integer",minimum:1}},additionalProperties:!1,not:{anyOf:[{description:"fee and maxFee are mutually exclusive",required:["fee","maxFee"]},{description:"maxLedgerVersion and maxLedgerVersionOffset are mutually exclusive",required:["maxLedgerVersion","maxLedgerVersionOffset"]}]}}},Kyfh:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"getSettingsParameters",description:"Parameters for getSettings",type:"object",properties:{address:{$ref:"address",description:"The address of the account to get the settings of."},options:{description:"Options that affect what to return.",properties:{ledgerVersion:{$ref:"ledgerVersion",description:"Get the settings as of this historical ledger version."}},additionalProperties:!1}},required:["address"],additionalProperties:!1}},Kyhd:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"balance",description:"Balance amount",link:"amount",type:"object",properties:{value:{description:"The balance on the trustline",$ref:"signedValue"},currency:{description:"The three-character code or hexadecimal string used to denote currencies",$ref:"currency"},counterparty:{description:"The XRP Ledger address of the account that owes or is owed the funds.",$ref:"address"}},additionalProperties:!1,required:["currency","value"],oneOf:[{properties:{currency:{not:{enum:["XRP"]}}},required:["counterparty"]},{properties:{currency:{enum:["XRP"]}},not:{required:["counterparty"]}}]}},MByD:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"getOrderbookParameters",description:"Parameters for getOrderbook",type:"object",properties:{address:{$ref:"address",description:"Address of an account to use as point-of-view. (This affects which unfunded offers are returned.)"},orderbook:{$ref:"orderbook",description:"The order book to get."},options:{description:"Options to determine what to return.",properties:{limit:{type:"integer",minimum:1,description:"Return at most this many orders from the order book."},ledgerVersion:{$ref:"ledgerVersion",description:"Return the order book as of this historical ledger version."}},additionalProperties:!1}},required:["address","orderbook"],additionalProperties:!1}},MUmj:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"getOrdersParameters",description:"Parameters for getOrders",type:"object",properties:{address:{$ref:"address",description:"The XRP Ledger address of the account to get open orders for."},options:{description:"Options that determine what orders will be returned.",properties:{limit:{type:"integer",minimum:1,description:"At most this many orders will be returned."},ledgerVersion:{$ref:"ledgerVersion",description:"Return orders as of this historical ledger version."}},additionalProperties:!1}},required:["address"],additionalProperties:!1}},MyBM:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"getOrders",type:"array",items:{type:"object",properties:{specification:{$ref:"order",description:"An order specification that would create an order equivalent to the current state of this order."},properties:{description:"Properties of the order not in the specification.",type:"object",properties:{maker:{$ref:"address",description:"The address of the account that submitted the order."},sequence:{$ref:"sequence",description:"The account sequence number of the transaction that created this order."},makerExchangeRate:{$ref:"value",description:'The exchange rate from the point of view of the account that submitted the order (also known as "quality").'}},required:["maker","sequence","makerExchangeRate"],addtionalProperties:!1}},required:["specification","properties"],additionalProperties:!1}}},N7A7:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"getBalances",type:"array",items:{$ref:"balance"}}},NHnr:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i("7+uW"),s=i("FO3E"),r=i.n(s),a=i("qcTE"),o=i.n(a),c=i("E5Az"),d=i("RKAd"),l=i.n(d),h=(i("4/hK"),i("UM8r"),i("5IAE"),i("7Xsf"),"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e}),p={name:"Dashboard",components:{codemirror:c.codemirror,VueJsonPretty:l.a},data:function data(){return{ledger:null,connectedLedgerType:"live",initialServers:{live:["xrpl.ws","s1.ripple.com"],test:["testnet.xrpl-labs.com","s.altnet.rippletest.net:51233"]},connectionPool:null,view:"c",menu:{c:"Connections",h:"Health Ranking",t:"TxWatch",r:"Raw Commands",x:"Get Transactions",s:"Submit Tx"},servers:[],accounts:[],connections:[],addHostname:"s2.ripple.com",newAccount:"",txSecretFocussed:!1,ranking:{data:{},interval:null},interestingAccounts:["rhub8VRN55s94qWKDv6jmDy1pUykJzF3wq","rETx8GBiH6fxhTcfHM9fGeyShqxozyD3xe","rH3uSRUJYoJhK4kL9x1mzUhDimKE2n3oT6","rLEsXccBGNR3UPuPu2hUXPjziKC3qKSBun","rENDnFwR3CPvrsPjD9XXeqVoXeVt2CpPWX","rhPGyJfM8bGjfNCiXLL7WRU8VZ5Cw4kHVe","rhKgFxe7Mp38yeJzvwoNLm46RxMdXotTn6","rDsbeomae4FXwgQTJp9Rs64Qg9vDiTCdBv","rPdvC6ccq8hCdPKSPJkPmyZ4Mi1oG2FFkT","rEb8TK3gBgk5auZkwc6sHnwrGVJH8DuaLh","rPVMhWBsfF9iMXYj3aAzJVkPDTFNSyWdKy","rCoinaUERUrXb1aA7dJu8qRcmvPNiKS3d","r9KG7Du7aFmABzMvDnwuvPaEoMu4Eurwok","rQHYSEyxX3GKK3F6sXRvdd2NHhUqaxtC6F"],storeTxAmount:2500,showOnlyPayments:!1,txCount:0,transactions:[],accountTransactions:{json:'{\n  "command": "account_tx",\n  "account": "rPEPPER7kfTD9w2To4CQk6UCfuHM9c6GDY",\n  "ledger_index_min": -1,\n  "ledger_index_max": -1,\n  "limit": 5,\n  "forward": true\n}',data:{account:"",records:{},lastResponse:null,error:""}},sendTransaction:{busy:!1,json:'{\n  "TransactionType": "Payment",\n  "Account": "rLmCYXJbMd8HgGj843PjWbsGARD8Q5mRSc",\n  "Fee": 10,\n  "Destination": "rPdvC6ccq8hCdPKSPJkPmyZ4Mi1oG2FFkT",\n  "DestinationTag": 495,\n  "Amount": 1234\n}',response:null,secret:"ss5Vzfhxwaom4K9qyeezCHPSCG5D7",extraSecrets:[],error:"",errorDetails:{},signed:{id:"",blob:""}},rawCommand:{commandId:0,options:{tabSize:2,mode:"application/json",theme:"monokai",lineNumbers:!0,line:!0,keymap:"sublime"},response:{body:"Response over here... (Execute command first)",state:null,data:null},json:'{\n  "command": "server_info"\n}',samples:{"Server info":'{\n  "command": "server_info"\n}',Random:'{\n  "command": "random"\n}',"Account transactions":'{\n  "command": "account_tx",\n  "account": "rPEPPER7kfTD9w2To4CQk6UCfuHM9c6GDY",\n  "ledger_index_min": -1,\n  "ledger_index_max": -1,\n  "limit": 2\n}',"Ledger info (recent)":'{\n  "command": "ledger",\n  "ledger_index": "closed",\n  "transactions": true\n}',"Ledger info (full history)":'{\n  "command": "ledger",\n  "ledger_index": 32570,\n  "transactions": true\n}',"Account (wallet) info":'{\n  "command": "account_info",\n  "account": "rPEPPER7kfTD9w2To4CQk6UCfuHM9c6GDY",\n  "ledger_index": "current"\n}'}}}},watch:{view:function view(e){var t=this;"h"===e?(this.ranking.data=this.connectionPool.getRanking(),this.ranking.interval=setInterval(function(){t.ranking.data=t.connectionPool.getRanking()},500)):clearInterval(this.ranking.interval)}},computed:{filteredTransactions:function filteredTransactions(){var e=this;return this.transactions.filter(function(t){return!e.showOnlyPayments||"Payment"===t.Data.transaction.TransactionType}).filter(function(e,t){return!(t>20)})},serverCount:function serverCount(){return this.connections.filter(function(e){return e.state.online}).length},offlineServers:function offlineServers(){var e=this,t=[];return this.servers.forEach(function(i){e.connections.filter(function(t){return t.hostname===i&&t.state.online&&e.ranking.data.ranking.indexOf(i)>-1}).length<1&&t.push(i)}),t}},beforeMount:function beforeMount(){var e=this;this.connectionPool=new r.a({}),this.connectionPool.on("ledger",function(t){e.ledger=t}),this.connectionPool.on("added",function(t){e.servers.push(t)}),this.connectionPool.on("removed",function(t){var i=e.servers.indexOf(t);i>-1&&e.servers.splice(i,1)}),this.connectionPool.on("hostinfo",function(t){var i=e.connections.filter(function(e){return e.hostname===t.hostname});1===i.length?e.connections[e.connections.indexOf(i[0])]=t:e.servers.indexOf(t.hostname)>-1&&e.connections.push(t)}),this.connectionPool.on("transaction",function(t){e.txCount++,t.__increment=e.txCount,e.transactions.unshift(t),e.transactions=e.transactions.slice(0,e.storeTxAmount)})},mounted:function mounted(){var e=this;if(2===document.location.hash.length){var t=document.location.hash.substring(1,2).toLowerCase();Object.keys(this.menu).indexOf(t>-1)&&(this.view=t)}var i=document.location.hash.match(/testnet/)?"test":"live";this.connectedLedgerType=i,"live"===i?this.interestingAccounts.forEach(function(t){e.accounts.push(t),e.connectionPool.subscribeAccount(t)}):this.connectionPool.on("added",function(t){var i=!0;e.connectionPool.on("ledger",function(t){i&&function subscribeTxStream(){e.showOnlyPayments=!1,e.connectionPool.send({command:"subscribe",streams:["transactions"]}).then(console.log).catch(console.log)}(),i=!1})}),this.initialServers[i].forEach(function(t){e.connectionPool.addServer(t)})},methods:{sendTx:function sendTx(){var e=this;this.sendTransaction.error="",this.sendTransaction.errorDetails={},this.sendTransaction.busy=!0,this.sendTransaction.signed.id="",this.sendTransaction.signed.blob="",this.sendTransaction.response=null;var t=void 0;try{t=JSON.parse(this.sendTransaction.json)}catch(e){this.sendTransaction.busy=!1,this.sendTransaction.error=""+e.message}if(t){var i=this.connectionPool.getConnection();console.log("Use RippledWsClient connection: ",i),console.log("Send TX @ connection:",i.getState().server.uri);var n=this.sendTransaction.secret;this.sendTransaction.extraSecrets.filter(function(e){return e.secret.trim().match(/^s/)}).length>0&&(n=[n],this.sendTransaction.extraSecrets.forEach(function(e){e.secret.trim().match(/^s/)&&n.push(e.secret.trim())})),new o.a(t,n,i).then(function(t){e.sendTransaction.busy=!1,e.sendTransaction.response=t}).catch(function(t){console.log("SignSubmitError:",t),e.sendTransaction.busy=!1,e.sendTransaction.error=t.details.type+" - "+t.details.message,void 0!==t.details&&void 0!==t.details.error&&(e.sendTransaction.errorDetails=t.details.error)})}},getTxs:function getTxs(e){var t=this;this.accountTransactions.data.error="";(void 0!==e&&e?this.accountTransactions.data.lastResponse.more():this.connectionPool.getTransactions("",this.accountTransactions.json)).then(function(i){t.accountTransactions.data.lastResponse=i,(i.account!==t.accountTransactions.data.account||void 0!==e&&!e)&&(t.accountTransactions.data.account=i.account,t.accountTransactions.data.records={}),i.txCount>0&&i.transactions.forEach(function(e){t.accountTransactions.data.records[e.tx.hash]=e})}).catch(function(e){console.log("getTxs ERROR",e),t.accountTransactions.data.error=e.message})},serverStateIcon:function serverStateIcon(e){var t="muted",i=this.connections.filter(function(t){return t.hostname===e});return 1===i.length&&"object"===h(i[0])&&void 0!==i[0].state&&"object"===h(i[0].state)&&null!==i[0].state&&void 0!==i[0].state.online&&(t=i[0].state.online?"success":"danger"),'<span class="text-'+t+'">⬤</span>'},switchToTestnet:function switchToTestnet(){window.location.hash="#testnet",window.location.reload()},switchToLivenet:function switchToLivenet(){window.location.hash="#c",window.location.reload()},addServer:function addServer(){this.connectionPool.addServer(this.addHostname),this.addHostname="",this.$refs.addserver.focus()},removeServer:function removeServer(e){this.connectionPool.removeServer(e);var t=this.connections.filter(function(t){return t.hostname===e});1===t.length&&this.connections.splice(this.connections.indexOf(t[0]),1)},addAccount:function addAccount(){var e=this.newAccount.trim();this.accounts.indexOf(e)<0&&(this.accounts.push(e),this.connectionPool.subscribeAccount(e)),this.newAccount="",this.$refs.addaccount.focus()},removeAccount:function removeAccount(e){var t=this.accounts.indexOf(e);t>-1&&(this.accounts.splice(t,1),this.connectionPool.unsubscribeAccount(e))},sendRawCommand:function sendRawCommand(){var e=this,t=this.rawCommand.commandId;this.rawCommand.commandId++,this.connectionPool.send(this.rawCommand.json,{idempotency:t,serverTimeout:1500,overallTimeout:1e4}).then(function(t){t.idempotency===e.rawCommand.commandId-1&&(e.rawCommand.response.state="response",e.rawCommand.response.body=t.response,e.rawCommand.response.data=t)}).catch(function(t){e.rawCommand.response.state="error",e.rawCommand.response.body="Error: "+t.message}),this.rawCommand.response.state="await",this.rawCommand.response.body="Waiting for results..."}}},u={render:function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("div",{staticClass:"hello",class:{testnet:"live"!==e.connectedLedgerType}},["live"!==e.connectedLedgerType?i("div",{staticClass:"row"},[e._m(0)]):e._e(),e._v(" "),i("div",{staticClass:"row"},[i("div",{staticClass:"col-12"},[i("h3",[i("b",{staticClass:"float-right text-warning"},[e._m(1),e._v(e._s(e.ledger))]),e._v(" "),i("b",[e._v("XRPL Dev. Dashboard")]),e._v(" "),e._m(2)])]),e._v(" "),i("div",{staticClass:"col-12 margin-bottom-10"},[i("ul",{staticClass:"nav nav-tabs nav-fill"},e._l(e.menu,function(t,n){return i("li",{key:n,staticClass:"nav-item"},[i("a",{staticClass:"nav-link",class:{active:e.view===n},attrs:{href:"#"+n},on:{click:function(t){e.view=n}}},[e._v(e._s(t))])])}),0)]),e._v(" "),"c"===e.view?i("div",{staticClass:"col-3"},[i("ul",{staticClass:"list-group list-sm list-group-flush"},[e.servers.length<1?i("li",{staticClass:"list-group-item text-center"},[e._m(3)]):e._e(),e._v(" "),e._l(e.servers,function(t){return i("li",{key:t,staticClass:"list-group-item"},["live"===e.connectedLedgerType?i("a",{staticClass:"text-danger float-right rm",on:{click:function(i){return e.removeServer(t)}}},[e._v("×")]):e._e(),e._v(" "),i("b",[i("code",{staticClass:"text-secondary"},[i("span",{domProps:{innerHTML:e._s(e.serverStateIcon(t))}}),e._v(" "+e._s(t))])])])})],2),e._v(" "),"live"===e.connectedLedgerType?i("div",[i("br"),e._v(" "),i("input",{directives:[{name:"model",rawName:"v-model",value:e.addHostname,expression:"addHostname"}],ref:"addserver",staticClass:"form-control",attrs:{type:"text",placeholder:"Add server (hostname)"},domProps:{value:e.addHostname},on:{keydown:function(t){return!t.type.indexOf("key")&&e._k(t.keyCode,"enter",13,t.key,"Enter")?null:e.addServer(t)},input:function(t){t.target.composing||(e.addHostname=t.target.value)}}}),e._v(" "),i("br"),e._v(" "),i("button",{staticClass:"btn btn-outline-danger pt-0 pb-0 btn-block text-center btn-xs",on:{click:function(t){return e.switchToTestnet()}}},[e._v("Switch to "),i("b",[e._v("TESTNET")])])]):i("div",[i("button",{staticClass:"btn btn-outline-success pt-0 pb-0 btn-block text-center btn-xs",on:{click:function(t){return e.switchToLivenet()}}},[e._v("Switch to "),i("b",[e._v("LIVENET")])])])]):e._e(),e._v(" "),e._l(e.connections,function(t){return"c"===e.view?i("div",{key:t.hostname,staticClass:"col-3"},[i("b",[e._v(e._s(t.hostname))]),e._v(" "),i("div",{staticClass:"alert",class:{"alert-warning":!t.state.online,"alert-primary":t.state.online}},[i("pre",[e._v(e._s(t.state))])])]):e._e()}),e._v(" "),"h"===e.view?i("div",{staticClass:"col-12"},[i("p",{staticClass:"alert alert-primary"},[e._v("\n        Server health ranking: the value in cells are the points by ranking. The smaller red value is the metric value.\n        A green background marks the #1 position (might be shared).\n      ")]),e._v(" "),i("table",{staticClass:"table table-hover table-sm"},[i("thead",[i("tr",[i("th"),e._v(" "),i("th"),e._v(" "),i("th"),e._v(" "),e._l(e.ranking.data.source,function(t,n){return i("th",{key:n,staticClass:"text-center"},[i("small",[i("b",[e._v(e._s(n))])])])}),e._v(" "),i("th")],2)]),e._v(" "),i("tbody",e._l(e.ranking.data.ranking,function(t,n){return i("tr",{key:t},[i("th",{attrs:{width:"30"}},[e._v("#"+e._s(n+1))]),e._v(" "),i("th",{attrs:{width:"30"},domProps:{innerHTML:e._s(e.serverStateIcon(t))}}),e._v(" "),i("th",{attrs:{width:"300"}},[e._v(e._s(t))]),e._v(" "),e._l(e.ranking.data.source,function(n,s){return i("td",{key:s,staticClass:"text-center",class:{"alert-success":!!e.ranking.data.source[s].order&&e.ranking.data.source[s].values[t]===e.ranking.data.source[s].values[e.ranking.data.source[s].order[0]]},attrs:{width:"90"}},[i("b",[e._v(e._s(e.ranking.data.source[s].points[t]))]),e._v(" "),i("br"),e._v(" "),i("small",[i("code",[e._v(e._s(e.ranking.data.source[s].values[t]))])])])}),e._v(" "),i("th",[i("h2",{staticClass:"health-points alert-primary"},[e._v(e._s(e.ranking.data.points[t]))])])],2)}),0),e._v(" "),i("tbody",e._l(e.offlineServers,function(t){return i("tr",{key:t},[i("th",{attrs:{width:"30"}}),e._v(" "),i("th",{attrs:{width:"30"},domProps:{innerHTML:e._s(e.serverStateIcon(t))}}),e._v(" "),i("th",{attrs:{width:"250"}},[e._v(e._s(t))]),e._v(" "),e._l(e.ranking.data.source,function(e,t){return i("td",{key:t,staticClass:"text-center",attrs:{width:"90"}})}),e._v(" "),i("th")],2)}),0)])]):e._e(),e._v(" "),"r"===e.view?i("div",{staticClass:"col-4"},[i("codemirror",{attrs:{options:e.rawCommand.options},model:{value:e.rawCommand.json,callback:function(t){e.$set(e.rawCommand,"json",t)},expression:"rawCommand.json"}}),e._v(" "),i("br"),e._v(" "),e._m(4),e._v(" "),e._l(Object.keys(e.rawCommand.samples),function(t){return i("button",{key:t,staticClass:"btn btn-sm btn-block",class:{"btn-outline-secondary":e.rawCommand.samples[t]!==e.rawCommand.json,"btn-primary":e.rawCommand.samples[t]===e.rawCommand.json},on:{click:function(i){e.rawCommand.json=e.rawCommand.samples[t]}}},[e._v(e._s(t))])})],2):e._e(),e._v(" "),"r"===e.view?i("div",{staticClass:"col-2 text-center"},[i("button",{staticClass:"btn btn-md btn-success",on:{click:e.sendRawCommand}},[i("b",[e._v("⇨ Execute")])])]):e._e(),e._v(" "),"r"===e.view?i("div",{staticClass:"col-6"},["response"===e.rawCommand.response.state?i("div",[i("table",{staticClass:"table-sm table table-bordered"},[i("tbody",[i("tr",[i("td",{attrs:{width:"140"}},[e._v("Response from")]),e._v(" "),i("td",{staticClass:"text-primary",attrs:{colspan:"3"}},[i("b",[e._v(e._s(e.rawCommand.response.data.server))])])]),e._v(" "),i("tr",[i("td",[e._v("Requests sent")]),e._v(" "),i("td",{staticClass:"text-primary",attrs:{colspan:"3"}},[i("b",[e._v(e._s(e.rawCommand.response.data.requestsSent))]),e._v("\n                (req. #"+e._s(e.rawCommand.response.data.waterfallSeq+1)+" succeeded)\n              ")])]),e._v(" "),e._l(e.rawCommand.response.data.failures,function(t,n){return i("tr",{key:t.server},[0===n?i("td",{attrs:{rowspan:e.rawCommand.response.data.failures.length}},[e._v("Failures")]):e._e(),e._v(" "),i("td",[i("code",[e._v(e._s(t.server))])]),e._v(" "),i("td",{staticClass:"text-primary"},[e._v(e._s(t.error))]),e._v(" "),i("td",{staticClass:"text-primary"},[e._v(e._s(t.type))])])})],2)])]):e._e(),e._v(" "),i("div",{staticClass:"jsonResponse alert",class:{"alert-secondary":null===e.rawCommand.response.state,"alert-warning":"await"===e.rawCommand.response.state,"alert-danger":"error"===e.rawCommand.response.state,success:"response"===e.rawCommand.response.state}},[i("vue-json-pretty",{attrs:{data:e.rawCommand.response.body}})],1)]):e._e(),e._v(" "),"t"===e.view&&"live"===e.connectedLedgerType?i("div",{staticClass:"col-3"},[i("ul",{staticClass:"list-group list-sm list-group-flush"},[e.accounts.length<1?i("li",{staticClass:"list-group-item text-center"},[e._m(5)]):e._e(),e._v(" "),e.accounts.length>0?i("div",{staticClass:"alert alert-warning text-center"},[i("div",{staticClass:"form-check"},[i("input",{directives:[{name:"model",rawName:"v-model",value:e.showOnlyPayments,expression:"showOnlyPayments"}],staticClass:"form-check-input",attrs:{type:"checkbox",id:"showOnlyPayments"},domProps:{checked:Array.isArray(e.showOnlyPayments)?e._i(e.showOnlyPayments,null)>-1:e.showOnlyPayments},on:{change:function(t){var i=e.showOnlyPayments,n=t.target,s=!!n.checked;if(Array.isArray(i)){var r=e._i(i,null);n.checked?r<0&&(e.showOnlyPayments=i.concat([null])):r>-1&&(e.showOnlyPayments=i.slice(0,r).concat(i.slice(r+1)))}else e.showOnlyPayments=s}}}),e._v(" "),i("label",{staticClass:"form-check-label",attrs:{for:"showOnlyPayments"}},[e._v('Show only "Payments"')])])]):e._e(),e._v(" "),e._l(e.accounts,function(t){return i("li",{key:t,staticClass:"list-group-item"},[i("a",{staticClass:"text-danger float-right rm",on:{click:function(i){return e.removeAccount(t)}}},[e._v("×")]),e._v(" "),i("b",[i("code",{staticClass:"text-secondary"},[e._v(e._s(t))])])])})],2),e._v(" "),i("br"),e._v(" "),i("input",{directives:[{name:"model",rawName:"v-model",value:e.newAccount,expression:"newAccount"}],ref:"addaccount",staticClass:"form-control",attrs:{type:"text",placeholder:"Add account (rXXX...)"},domProps:{value:e.newAccount},on:{keydown:function(t){return!t.type.indexOf("key")&&e._k(t.keyCode,"enter",13,t.key,"Enter")?null:e.addAccount(t)},input:function(t){t.target.composing||(e.newAccount=t.target.value)}}}),e._v(" "),i("br"),e._v(" "),e._l(e.interestingAccounts,function(t){return e.accounts.indexOf(t)<0?i("a",{key:t,class:{"d-block":!0},on:{click:function(i){e.newAccount=t,e.addAccount()}}},[i("small",[i("code",[e._v(e._s(t))])])]):e._e()})],2):e._e(),e._v(" "),"t"===e.view?i("div",{class:{"col-9":"live"===e.connectedLedgerType,"col-12":"live"!==e.connectedLedgerType}},[e.filteredTransactions.length<1?i("div",{staticClass:"alert alert-primary text-center"},[e._v("\n        No transactions (yet)\n        "),e.showOnlyPayments?i("span",[e._v("\n           - but only "),i("b",[e._v("payments")]),e._v(" will be displayed\n          "),i("a",{on:{click:function(t){e.showOnlyPayments=!e.showOnlyPayments}}},[e._m(6)])]):e._e()]):e._e(),e._v(" "),e.filteredTransactions.length>0?i("table",{staticClass:"table table-sm table-tx table-hover table-bordered"},[e._m(7),e._v(" "),i("tbody",e._l(e.filteredTransactions,function(t){return i("tr",{key:t.Hash},[i("td",{staticClass:"text-right",attrs:{valign:"top"}},[e._v(e._s(t.__increment))]),e._v(" "),i("td",{attrs:{valign:"top"}},[i("b",[e._v(e._s(t.Data.transaction.TransactionType))]),i("br")]),e._v(" "),i("td",{class:{complete:Math.min(e.serverCount,t.SeenBy.length)/e.serverCount==1},attrs:{valign:"top"}},[i("code",[e._v(e._s(t.Data.engine_result))]),e._v(" "),i("div",{staticClass:"seenByPct",style:"width: "+t.SeenBy.length/e.serverCount*100+"%;"})]),e._v(" "),i("td",{attrs:{valign:"top"}},[i("code",{staticClass:"text-secondary"},[e._v(e._s(t.Hash))]),e._v(" @ "),i("b",[e._v(e._s(t.Data.ledger_index))]),i("br"),e._v(" "),t.Data.transaction.Amount&&"string"==typeof t.Data.transaction.Amount?i("b",{staticClass:"text-right amount text-info"},[e._v("\n                "+e._s(parseFloat(t.Data.transaction.Amount)/1e6)+" XRP\n              ")]):e._e(),e._v(" "),t.Data.transaction.Destination?i("span",[e._v("⇨ "),i("code",{staticClass:"text-info"},[e._v(e._s(t.Data.transaction.Destination))])]):e._e()]),e._v(" "),i("td",{attrs:{valign:"top"}},[i("code",{staticClass:"text-primary"},[i("b",[e._v(e._s(t.Data.transaction.Account))])]),i("br"),e._v(" "),i("code",{staticClass:"text-secondary"},[e._v(e._s(t.FirstResponder))])])])}),0)]):e._e()]):e._e(),e._v(" "),"x"===e.view?i("div",{staticClass:"col-4"},[i("codemirror",{attrs:{options:e.rawCommand.options},model:{value:e.accountTransactions.json,callback:function(t){e.$set(e.accountTransactions,"json",t)},expression:"accountTransactions.json"}})],1):e._e(),e._v(" "),"x"===e.view?i("div",{staticClass:"col-2 text-center"},[i("button",{staticClass:"btn btn-md btn-success",on:{click:function(t){return e.getTxs(!1)}}},[i("b",[e._v("⇨ Execute")])])]):e._e(),e._v(" "),"x"===e.view?i("div",{staticClass:"col-6"},[""!==e.accountTransactions.data.error?i("p",{staticClass:"alert alert-danger text-center"},[e._v("\n        "+e._s(e.accountTransactions.data.error)+"\n      ")]):e._e(),e._v(" "),""===e.accountTransactions.data.error&&""===e.accountTransactions.data.account?i("p",{staticClass:"alert alert-warning text-center"},[e._v("\n        Awaiting execution...\n      ")]):e._e(),e._v(" "),""===e.accountTransactions.data.error&&""!==e.accountTransactions.data.account?i("div",[i("h5",[i("b",[e._v("Transactions:")]),e._v(" "+e._s(e.accountTransactions.data.account))]),e._v(" "),"object"==typeof e.accountTransactions.data.lastResponse?i("div",[e._v("\n          Data from: "),i("code",[i("b",{staticClass:"text-primary"},[e._v(e._s(e.accountTransactions.data.lastResponse.server.host))])]),e._v(" in "),i("b",[e._v(e._s(e.accountTransactions.data.lastResponse.replyMs)+"ms")]),e._v(" "),i("small",{staticClass:"text-muted"},[e._v("(preferred order: "+e._s(e.accountTransactions.data.lastResponse.server.preferenceIndex+1)+")")])]):e._e(),e._v(" "),i("hr"),e._v(" "),i("table",{staticClass:"table table-sm table-hover"},[e._m(8),e._v(" "),i("tbody",e._l(e.accountTransactions.data.records,function(t){return i("tr",{key:t.tx.hash},[i("td",[e._v(e._s(t.tx.inLedger))]),e._v(" "),i("td",[e._v(e._s(t.tx.TransactionType))]),e._v(" "),i("td",[i("code",[i("small",[e._v(e._s(t.tx.Account===e.accountTransactions.data.account?t.tx.Destination:t.tx.Account))])])]),e._v(" "),i("td",{staticClass:"text-right"},[e._v(e._s(isNaN(parseFloat(t.tx.Amount))?"":(parseFloat(t.tx.Amount)/1e6).toFixed(6)))]),e._v(" "),i("td",[e._v(e._s(new Date(1e3*(t.tx.date+946684800)).toISOString().split(".")[0].replace("T"," ")))])])}),0)]),e._v(" "),"function"==typeof e.accountTransactions.data.lastResponse.more?i("button",{staticClass:"btn btn-primary btn-block",on:{click:function(t){return e.getTxs(!0)}}},[e._v("+ Load more")]):e._e(),e._v(" "),i("br"),e._v(" \n      ")]):e._e()]):e._e(),e._v(" "),"s"===e.view?i("div",{staticClass:"col-4"},[i("div",{staticClass:"input-group"},["checkbox"==(e.txSecretFocussed?"text":"password")?i("input",{directives:[{name:"model",rawName:"v-model",value:e.sendTransaction.secret,expression:"sendTransaction.secret"}],ref:"secret",staticClass:"form-control",attrs:{placeholder:"Secret (for local signing), eg. sXXX...XXX",type:"checkbox"},domProps:{checked:Array.isArray(e.sendTransaction.secret)?e._i(e.sendTransaction.secret,null)>-1:e.sendTransaction.secret},on:{focus:function(t){e.txSecretFocussed=!0},blur:function(t){e.txSecretFocussed=!1},change:function(t){var i=e.sendTransaction.secret,n=t.target,s=!!n.checked;if(Array.isArray(i)){var r=e._i(i,null);n.checked?r<0&&e.$set(e.sendTransaction,"secret",i.concat([null])):r>-1&&e.$set(e.sendTransaction,"secret",i.slice(0,r).concat(i.slice(r+1)))}else e.$set(e.sendTransaction,"secret",s)}}}):"radio"==(e.txSecretFocussed?"text":"password")?i("input",{directives:[{name:"model",rawName:"v-model",value:e.sendTransaction.secret,expression:"sendTransaction.secret"}],ref:"secret",staticClass:"form-control",attrs:{placeholder:"Secret (for local signing), eg. sXXX...XXX",type:"radio"},domProps:{checked:e._q(e.sendTransaction.secret,null)},on:{focus:function(t){e.txSecretFocussed=!0},blur:function(t){e.txSecretFocussed=!1},change:function(t){return e.$set(e.sendTransaction,"secret",null)}}}):i("input",{directives:[{name:"model",rawName:"v-model",value:e.sendTransaction.secret,expression:"sendTransaction.secret"}],ref:"secret",staticClass:"form-control",attrs:{placeholder:"Secret (for local signing), eg. sXXX...XXX",type:e.txSecretFocussed?"text":"password"},domProps:{value:e.sendTransaction.secret},on:{focus:function(t){e.txSecretFocussed=!0},blur:function(t){e.txSecretFocussed=!1},input:function(t){t.target.composing||e.$set(e.sendTransaction,"secret",t.target.value)}}}),e._v(" "),i("div",{staticClass:"input-group-append"},[i("button",{staticClass:"btn btn-outline-primary",attrs:{id:"addSecret",type:"button"},on:{click:function(t){return e.sendTransaction.extraSecrets.push({focussed:!1,secret:""})}}},[e._v("\n            + "),i("span",[e._v("Multisign")])])])]),e._v(" "),e._l(e.sendTransaction.extraSecrets,function(t,n){return i("div",{key:n,staticClass:"input-group",staticStyle:{"margin-top":"4px"}},["checkbox"==(t.focussed?"text":"password")?i("input",{directives:[{name:"model",rawName:"v-model",value:t.secret,expression:"s.secret"}],staticClass:"form-control",attrs:{placeholder:"Secret (for local signing), eg. sXXX...XXX",type:"checkbox"},domProps:{checked:Array.isArray(t.secret)?e._i(t.secret,null)>-1:t.secret},on:{focus:function(e){t.focussed=!0},blur:function(e){t.focussed=!1},change:function(i){var n=t.secret,s=i.target,r=!!s.checked;if(Array.isArray(n)){var a=e._i(n,null);s.checked?a<0&&e.$set(t,"secret",n.concat([null])):a>-1&&e.$set(t,"secret",n.slice(0,a).concat(n.slice(a+1)))}else e.$set(t,"secret",r)}}}):"radio"==(t.focussed?"text":"password")?i("input",{directives:[{name:"model",rawName:"v-model",value:t.secret,expression:"s.secret"}],staticClass:"form-control",attrs:{placeholder:"Secret (for local signing), eg. sXXX...XXX",type:"radio"},domProps:{checked:e._q(t.secret,null)},on:{focus:function(e){t.focussed=!0},blur:function(e){t.focussed=!1},change:function(i){return e.$set(t,"secret",null)}}}):i("input",{directives:[{name:"model",rawName:"v-model",value:t.secret,expression:"s.secret"}],staticClass:"form-control",attrs:{placeholder:"Secret (for local signing), eg. sXXX...XXX",type:t.focussed?"text":"password"},domProps:{value:t.secret},on:{focus:function(e){t.focussed=!0},blur:function(e){t.focussed=!1},input:function(i){i.target.composing||e.$set(t,"secret",i.target.value)}}}),e._v(" "),i("div",{staticClass:"input-group-append"},[i("button",{staticClass:"btn btn-outline-danger",attrs:{type:"button"},on:{click:function(t){return e.sendTransaction.extraSecrets.splice(n,1)}}},[e._v("\n            ×\n          ")])])])}),e._v(" "),e._m(9),e._v(" "),i("codemirror",{attrs:{options:e.rawCommand.options},model:{value:e.sendTransaction.json,callback:function(t){e.$set(e.sendTransaction,"json",t)},expression:"sendTransaction.json"}}),e._v(" "),i("br"),e._v(" "),e._m(10)],2):e._e(),e._v(" "),"s"===e.view?i("div",{staticClass:"col-2 text-center"},[i("button",{staticClass:"btn btn-md btn-success",attrs:{disabled:e.sendTransaction.busy},on:{click:e.sendTx}},[i("b",[e._v("⇨ Execute")])])]):e._e(),e._v(" "),"s"===e.view?i("div",{staticClass:"col-6"},[null!==e.sendTransaction.response||e.sendTransaction.busy||""!==e.sendTransaction.error?e._e():i("p",{staticClass:"alert alert-warning text-center"},[e._v("\n        Awaiting execution...\n      ")]),e._v(" "),""!==e.sendTransaction.error?i("div",[i("div",{staticClass:"alert alert-danger text-center"},[i("b",[e._v("Error: ")]),e._v(" "+e._s(e.sendTransaction.error)+"\n        ")]),e._v(" "),e.sendTransaction.errorDetails!=={}?i("div",{staticClass:"error"},[e._m(11),e._v(" "),i("vue-json-pretty",{attrs:{data:e.sendTransaction.errorDetails}})],1):e._e()]):e._e(),e._v(" "),null!==e.sendTransaction.response&&e.sendTransaction.response.hash?i("p",{staticClass:"alert alert-success text-center"},[e._v("\n        Transaction succeeded! "),i("b",[i("a",{attrs:{href:"https://xrpcharts.ripple.com/#/transactions/"+e.sendTransaction.response.hash,target:"_blank"}},[e._v("View transaction on xrpcharts.ripple.com")])])]):e._e(),e._v(" "),null===e.sendTransaction.response&&e.sendTransaction.busy?i("p",{staticClass:"alert alert-primary text-center"},[e._v("\n        Processing transaction...\n      ")]):e._e(),e._v(" "),null===e.sendTransaction.response||e.sendTransaction.busy?e._e():i("vue-json-pretty",{attrs:{data:e.sendTransaction.response}}),e._v(" "),i("br"),e._v(" \n    ")],1):e._e()],2),e._v(" "),e._m(12)])},staticRenderFns:[function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"col-12"},[t("div",{staticClass:"pt-0 pb-0 alert alert-danger text-center"},[t("b",[t("code",{staticClass:"text-danger"},[this._v("TESTNET")])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("small",[t("small",[t("span",{staticClass:"text-muted"},[this._v("Last closed ledger ")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("small",[t("span",{staticClass:"text-warning"},[this._v("»")]),this._v(" "),t("small",[this._v("Source: ")]),this._v(" "),t("code",[t("small",[t("a",{attrs:{href:"https://github.com/WietseWind/rippled-ws-client-dashboard",target:"_blank"}},[this._v("rippled-ws-client-dashboard")])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("span",{staticClass:"text-danger"},[t("b",[this._v("No servers")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h5",[t("b",[this._v("Samples")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("span",{staticClass:"text-danger"},[t("b",[this._v("No accounts watched")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("b",[t("u",[this._v("disable filter")])])},function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("thead",[i("tr",[i("th",{attrs:{width:"50"}}),e._v(" "),i("th",{attrs:{width:"100"}},[e._v("Tx Type")]),e._v(" "),i("th",{attrs:{width:"140"}},[e._v("Tx Status")]),e._v(" "),i("th",[e._v("Tx Hash @ Ledger")]),e._v(" "),i("th",{attrs:{width:"300"}},[e._v("Account (first responder)")])])])},function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("thead",[i("tr",[i("th",[e._v("Ledger")]),e._v(" "),i("th",{attrs:{width:"100"}},[e._v("Type")]),e._v(" "),i("th",[e._v("Counterparty")]),e._v(" "),i("th",[e._v("Amount")]),e._v(" "),i("th",[e._v("Date")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"text-center",staticStyle:{color:"rgb(209,22,61)","line-height":".9em",padding:"8px 6px 12px 6px"}},[t("small",[t("b",[this._v("Secrets will "),t("u",[this._v("NOT")]),this._v(" be sent over the internet, since transaction signing will happen locally (client side) 🎉")])])])},function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ul",{staticClass:"text-muted"},[i("li",[i("small",[e._v("Enter the sending wallet address at "),i("code",[e._v("Account")]),e._v(". Of course the Secret should be allowed to sign transactions for this account.")])]),e._v(" "),i("li",[i("small",[e._v("If you don't enter a "),i("code",[e._v("Sequence")]),e._v(", "),i("a",{attrs:{href:"https://github.com/WietseWind/rippled-ws-client-sign",target:"_blank"}},[e._v("rippled-ws-client-sign")]),e._v(" will auto-lookup using an account_info request.")])]),e._v(" "),i("li",[i("small",[e._v("Enter the "),i("code",[e._v("Amount")]),e._v(" and "),i("code",[e._v("Fee")]),e._v(" in drops ("),i("code",[e._v("1.000.000")]),e._v(" drops = "),i("code",[e._v("1")]),e._v(" XRP) ")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h5",[t("b",[this._v("Error details:")])])},function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("div",{staticClass:"row pt-0 pb-0"},[i("div",{staticClass:"col-12 pt-0 pb-0 text-center byWietse"},[i("div",[i("small",[e._v("\n        By "),i("span",{staticClass:"text-muted"},[i("a",{staticClass:"text-muted",attrs:{href:"https://twitter.com/WietseWind",target:"_blank"}},[e._v("@WietseWind")])]),e._v("\n        -\n        Source:\n          "),i("code",[i("a",{staticClass:"text-muted",attrs:{href:"https://github.com/WietseWind/rippled-ws-client-pool",target:"_blank"}},[e._v("Connection Pool")])]),e._v("\n          /\n          "),i("code",[i("a",{staticClass:"text-muted",attrs:{href:"https://github.com/WietseWind/rippled-ws-client-dashboard/blob/master/src/components/Dashboard.vue",target:"_blank"}},[e._v("Dashboard")])]),e._v(" (Github)\n        -\n        "),i("code",[i("a",{staticClass:"text-muted",attrs:{href:"https://www.xrptipbot.com/u:WietseWind/n:twitter",target:"_blank"}},[e._v("Donations 😇")])])])])])])}]};var f={name:"App",components:{Dashboard:i("VU/8")(p,u,!1,function injectStyle(e){i("rUOe"),i("TXsg")},"data-v-57566692",null).exports}},m={render:function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"container-fluid",attrs:{id:"app"}},[t("Dashboard")],1)},staticRenderFns:[]};var g=i("VU/8")(f,m,!1,function App_injectStyle(e){i("fx7f")},null,null).exports;n.a.config.productionTip=!1,new n.a({el:"#app",components:{App:g},template:"<App/>"})},Oar4:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"getAccountInfo",type:"object",properties:{sequence:{$ref:"sequence",description:"The next (smallest unused) sequence number for this account."},xrpBalance:{$ref:"value",description:"The XRP balance owned by the account."},ownerCount:{type:"integer",minimum:0,description:"Number of other ledger entries (specifically, trust lines and offers) attributed to this account. This is used to calculate the total reserve required to use the account."},previousInitiatedTransactionID:{$ref:"hash256",description:"Hash value representing the most recent transaction that was initiated by this account."},previousAffectingTransactionID:{$ref:"hash256",description:"Hash value representing the most recent transaction that affected this account node directly. **Note:** This does not include changes to the account’s trust lines and offers."},previousAffectingTransactionLedgerVersion:{$ref:"ledgerVersion",description:"The ledger version that the transaction identified by the `previousAffectingTransactionID` was validated in."}},required:["sequence","xrpBalance","ownerCount","previousAffectingTransactionID","previousAffectingTransactionLedgerVersion"],additionalProperties:!1}},Oc33:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"getAccountInfoParameters",description:"Parameters for getAccountInfo",type:"object",properties:{address:{$ref:"address",description:"The address of the account to get the account info of."},options:{description:"Options that affect what to return.",properties:{ledgerVersion:{$ref:"ledgerVersion",description:"Get the account info as of this historical ledger version."}},additionalProperties:!1}},required:["address"],additionalProperties:!1}},PMYs:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"getTrustlines",type:"array",items:{properties:{specification:{$ref:"trustline",description:"A trustline specification that would produce this trustline in its current state."},counterparty:{properties:{limit:{$ref:"value",description:"The maximum amount that the counterparty can be owed through the trustline."},ripplingDisabled:{type:"boolean",description:"If true, payments cannot ripple through this trustline."},frozen:{type:"boolean",description:"If true, the trustline is frozen, which means that funds can only be sent to the counterparty."},authorized:{type:"boolean",description:"If true, the counterparty authorizes this party to hold issuances from the counterparty."}},description:"Properties of the trustline from the perspective of the counterparty.",required:["limit"],additionalProperties:!1},state:{properties:{balance:{$ref:"signedValue",description:"The balance on the trustline, representing which party owes the other and by how much."}},description:"Properties of the trustline regarding it's current state that are not part of the specification.",required:["balance"],additionalProperties:!1}},required:["specification","counterparty","state"],additionalProperties:!1}}},POTM:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"getPayment",description:"A specification of a payment in a response for getTransaction or getTransactions.",type:"object",properties:{source:{$ref:"sourceAdjustment",description:"The source of the funds to be sent."},destination:{$ref:"destinationAddressTag",description:"The destination of the funds to be sent. Since this is a payment response, the amount is not shown here. For the amount that the transaction delivered, see `outcome.deliveredAmount`."},paths:{type:"string",description:"The paths of trustlines and orders to use in executing the payment."},memos:{$ref:"memos"},invoiceID:{description:"A 256-bit hash that can be used to identify a particular payment.",$ref:"hash256"},allowPartialPayment:{description:"If true, this payment should proceed even if the whole amount cannot be delivered due to a lack of liquidity or a lack of funds in the source account.",type:"boolean"},noDirectRipple:{description:"If true and paths are specified, the sender would like the XRP Ledger to disregard any direct paths from the source account to the destination account. This may be used to take advantage of an arbitrage opportunity or by gateways wishing to issue balances from a hot wallet to a user who has mistakenly set a trustline directly to the hot wallet.",type:"boolean"},limitQuality:{description:"Only take paths where all the conversions have an input:output ratio that is equal or better than the ratio of destination.amount:source.maxAmount.",type:"boolean"}},required:["source","destination"],additionalProperties:!1}},QDfD:function(e,t){e.exports={"1.3.132.0.10":"secp256k1","1.3.132.0.33":"p224","1.2.840.10045.3.1.1":"p192","1.2.840.10045.3.1.7":"p256","1.3.132.0.34":"p384","1.3.132.0.35":"p521"}},QOHT:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"amount",link:"amount",description:"An Amount on the XRP Ledger",allOf:[{$ref:"amountbase"},{required:["value"]}]}},RI6Y:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"laxAmount",description:"Amount where counterparty is optional",link:"amount",type:"object",properties:{currency:{$ref:"currency"},counterparty:{$ref:"address"},value:{$ref:"value"}},required:["currency","value"],additionalProperties:!1}},RaSC:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"AccountObjectsResponse",description:"Response format for account_objects",type:"object",properties:{account:{$ref:"address",description:"Unique address of the account this request corresponds to."},account_objects:{type:"array",items:{type:"object"},description:"Array of objects owned by this account. Each object is in its raw ledger format."},ledger_hash:{type:"string",description:"(May be omitted) The identifying hash of the ledger that was used to generate this response."},ledger_index:{$ref:"ledgerVersion",description:"(May be omitted) The sequence number of the ledger that was used to generate this response."},ledger_current_index:{$ref:"ledgerVersion",description:"(May be omitted) The sequence number of the ledger that was used to generate this response."},limit:{type:"integer",description:"(May be omitted) The limit that was used in this request, if any."},validated:{type:"boolean",description:"If included and set to true, the information in this request comes from a validated ledger version. Otherwise, the information is subject to change."}},required:["account","account_objects"],additionalProperties:!1}},"Rev+":function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"prepareCheckCreateParameters",type:"object",properties:{address:{$ref:"address",description:"The address of the account that is creating the transaction."},checkCreate:{$ref:"checkCreate",description:"The specification of the Check create creation to prepare."},instructions:{$ref:"instructions"}},additionalProperties:!1,required:["address","checkCreate"]}},Rou3:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"currency",description:"The three-character code or hexadecimal string used to denote currencies",type:"string",link:"currency",pattern:"^([a-zA-Z0-9<>(){}[\\]|?!@#$%^&*]{3}|[A-F0-9]{40}|drops)$"}},SJue:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"getOrderbook",type:"object",properties:{bids:{$ref:"orderbookOrders",description:"The buy orders in the order book."},asks:{$ref:"orderbookOrders",description:"The sell orders in the order book."}},required:["bids","asks"],additionalProperties:!1}},Sq24:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"prepareOrderParameters",type:"object",properties:{address:{$ref:"address",description:"The address of the account that is creating the transaction."},order:{$ref:"order",description:"The specification of the order to prepare."},instructions:{$ref:"instructions"}},additionalProperties:!1,required:["address","order"]}},T4fq:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"uint32",description:"A 32-bit unsigned integer",type:"integer",minimum:0,maximum:4294967295}},TIAG:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"getServerInfo",type:"object",properties:{buildVersion:{type:"string",description:"The version number of the running rippled version."},completeLedgers:{type:"string",pattern:"[0-9,-]+",description:"Range expression indicating the sequence numbers of the ledger versions the local rippled has in its database. It is possible to be a disjoint sequence, e.g. “2500-5000,32570-7695432”."},hostID:{type:"string",description:"On an admin request, returns the hostname of the server running the rippled instance; otherwise, returns a unique four letter word."},ioLatencyMs:{type:"number",description:"Amount of time spent waiting for I/O operations to be performed, in milliseconds. If this number is not very, very low, then the rippled server is probably having serious load issues."},load:{type:"object",description:"*(Admin only)* Detailed information about the current load state of the server.",properties:{jobTypes:{type:"array",description:"*(Admin only)* Information about the rate of different types of jobs being performed by the server and how much time it spends on each.",items:{type:"object"}},threads:{type:"number",description:"*(Admin only)* The number of threads in the server’s main job pool, performing various operations."}},required:["jobTypes","threads"]},lastClose:{type:"object",description:"Information about the last time the server closed a ledger.",properties:{convergeTimeS:{type:"number",description:"The time it took to reach a consensus for the last ledger closing, in seconds."},proposers:{type:"integer",minimum:0,description:"Number of trusted validators participating in the ledger closing."}},required:["convergeTimeS","proposers"]},loadFactor:{type:"number",description:"The load factor the server is currently enforcing, as a multiplier on the base transaction fee. The load factor is determined by the highest of the individual server’s load factor, cluster’s load factor, and the overall network’s load factor."},peers:{type:"integer",minimum:0,description:"How many other rippled servers the node is currently connected to."},pubkeyNode:{type:"string",description:"Public key used to verify this node for internal communications; this key is automatically generated by the server the first time it starts up. (If deleted, the node can just create a new pair of keys.)"},pubkeyValidator:{type:"string",description:"*(Admin only)* Public key used by this node to sign ledger validations."},serverState:{type:"string",description:"A string indicating to what extent the server is participating in the network. See [Possible Server States](https://developers.ripple.com/rippled-server-states.html) for more details.",enum:["disconnected","connected","syncing","tracking","full","validating","proposing"]},validatedLedger:{type:"object",description:"Information about the fully-validated ledger with the highest sequence number (the most recent).",properties:{age:{type:"integer",minimum:0,description:"The time since the ledger was closed, in seconds."},baseFeeXRP:{$ref:"value",description:"Base fee, in XRP. This may be represented in scientific notation such as 1e-05 for 0.00005."},hash:{$ref:"hash256",description:"Unique hash for the ledger, as an uppercase hexadecimal string."},reserveBaseXRP:{$ref:"value",description:"Minimum amount of XRP necessary for every account to keep in reserve."},reserveIncrementXRP:{$ref:"value",description:"Amount of XRP added to the account reserve for each object an account is responsible for in the ledger."},ledgerVersion:{type:"integer",minimum:0,description:"Identifying sequence number of this ledger version."}},additionalProperties:!1,required:["age","baseFeeXRP","hash","reserveBaseXRP","reserveIncrementXRP","ledgerVersion"]},validationQuorum:{type:"number",description:"Minimum number of trusted validations required in order to validate a ledger version. Some circumstances may cause the server to require more validations."}},required:["buildVersion","completeLedgers","hostID","ioLatencyMs","lastClose","loadFactor","peers","pubkeyNode","serverState","validatedLedger","validationQuorum"],additionalProperties:!1}},TXsg:function(e,t){},Tl1V:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"prepareCheckCancelParameters",type:"object",properties:{address:{$ref:"address",description:"The address of the account that is creating the transaction."},checkCancel:{$ref:"checkCancel",description:"The specification of the Check cancellation to prepare."},instructions:{$ref:"instructions"}},additionalProperties:!1,required:["address","checkCancel"]}},UEQr:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"checkCash",link:"check-cash",type:"object",properties:{checkID:{$ref:"hash256",description:"The ID of the Check ledger object to cash, as a 64-character hexadecimal string."},amount:{$ref:"laxAmount",description:"Redeem the Check for exactly this amount, if possible. The currency must match that of the sendMax of the corresponding CheckCreate transaction. You must provide either this field or deliverMin."},deliverMin:{$ref:"laxAmount",description:"Redeem the Check for at least this amount and for as much as possible. The currency must match that of the sendMax of the corresponding CheckCreate transaction. You must provide either this field or amount."}},required:["checkID"],oneOf:[{required:["amount"]},{required:["deliverMin"]}],additionalProperties:!1}},UM8r:function(e,t){},UY2t:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"privateKey",description:"The hexadecimal representation of a secp256k1 or Ed25519 private key.",type:"string",pattern:"^[A-F0-9]+$"}},VNxr:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"quality",description:"Ratio for incoming/outgoing transit fees.",type:"number",minimum:1e-9,maximum:4.294967295}},VxSM:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"getTransactionsParameters",description:"Parameters for getTransactions",type:"object",properties:{address:{$ref:"address",description:"The address of the account to get transactions for."},options:{description:"Options to filter the resulting transactions.",properties:{start:{$ref:"hash256",description:"If specified, this transaction will be the first transaction in the result. You cannot use `start` with `minLedgerVersion` or `maxLedgerVersion`. When `start` is specified, these ledger versions will be determined internally."},limit:{type:"integer",minimum:1,description:"If specified, return at most this many transactions."},minLedgerVersion:{$ref:"ledgerVersion",description:"Return only transactions in this ledger version or higher."},maxLedgerVersion:{$ref:"ledgerVersion",description:"Return only transactions in this ledger version or lower."},earliestFirst:{type:"boolean",description:"If true, sort transactions so that the earliest ones come first. By default, the newest transactions will come first."},excludeFailures:{type:"boolean",description:"If true, the result will omit transactions that did not succeed."},initiated:{type:"boolean",description:"If true, return only transactions initiated by the account specified by `address`. If false, return only transactions not initiated by the account specified by `address`."},counterparty:{$ref:"address",description:"If provided, only return transactions with this account as a counterparty to the transaction."},types:{type:"array",items:{$ref:"transactionType"},description:"Only return transactions of the specified [Transaction Types](#transaction-types)."},includeRawTransactions:{description:"Include raw transaction data. For advanced users; exercise caution when interpreting this data. "},binary:{type:"boolean",description:"If true, the transactions will be sent from the server in a condensed binary format rather than JSON."}},additionalProperties:!1,not:{anyOf:[{required:["start","minLedgerVersion"]},{required:["start","maxLedgerVersion"]}]}}},additionalProperties:!1,required:["address"]}},X1G6:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"getSettings",$ref:"settingsPlusMemos",not:{required:["memos"]}}},X6uC:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"tx-json",link:"https://developers.ripple.com/transaction-formats.html",description:"An object in rippled txJSON format",type:"object",properties:{Account:{$ref:"address"},TransactionType:{type:"string"}},required:["Account","TransactionType"]}},YSip:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"issue",description:"A currency-counterparty pair, or just currency if it's XRP",allOf:[{$ref:"amountbase"},{not:{required:["value"]}}]}},aRt1:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"preparePaymentChannelClaimParameters",type:"object",properties:{address:{$ref:"address",description:"The address of the account that is creating the transaction."},paymentChannelClaim:{$ref:"paymentChannelClaim",description:"Details of the channel and claim."},instructions:{$ref:"instructions"}},additionalProperties:!1,required:["address","paymentChannelClaim"]}},atAV:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"maxAdjustment",type:"object",properties:{address:{$ref:"address",description:"The address to send from."},maxAmount:{$ref:"laxAmount",description:"The maximum amount to send. (This field cannot be used with source.amount)"},tag:{$ref:"tag"}},required:["address","maxAmount"],additionalProperties:!1}},ayWT:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"memos",link:"transaction-memos",description:"Array of memos to attach to the transaction.",type:"array",items:{$ref:"memo"}}},"b+cg":function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"signPaymentChannelClaimParameters",type:"object",properties:{channel:{$ref:"hash256",description:"256-bit hexadecimal channel identifier."},amount:{$ref:"value",description:"Amount of XRP authorized by the claim."},privateKey:{$ref:"publicKey",description:"The private key to sign the payment channel claim."}},additionalProperties:!1,required:["channel","amount","privateKey"]}},bB5L:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"checkCancel",link:"check-cancel",type:"object",properties:{checkID:{$ref:"hash256",description:"The ID of the Check ledger object to cancel, as a 64-character hexadecimal string."}},required:["checkID"],additionalProperties:!1}},bZpQ:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"payment",link:"payment",type:"object",properties:{source:{$ref:"sourceAdjustment",description:"The source of the funds to be sent."},destination:{$ref:"destinationAdjustment",description:"The destination of the funds to be sent."},paths:{type:"string",description:"The paths of trustlines and orders to use in executing the payment."},memos:{$ref:"memos"},invoiceID:{description:"A 256-bit hash that can be used to identify a particular payment.",$ref:"hash256"},allowPartialPayment:{description:"If true, this payment should proceed even if the whole amount cannot be delivered due to a lack of liquidity or a lack of funds in the source account.",type:"boolean"},noDirectRipple:{description:"If true and paths are specified, the sender would like the XRP Ledger to disregard any direct paths from the source account to the destination account. This may be used to take advantage of an arbitrage opportunity or by gateways wishing to issue balances from a hot wallet to a user who has mistakenly set a trustline directly to the hot wallet.",type:"boolean"},limitQuality:{description:"Only take paths where all the conversions have an input:output ratio that is equal or better than the ratio of destination.amount:source.maxAmount.",type:"boolean"}},required:["source","destination"],additionalProperties:!1}},"cht/":function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"paymentChannelClaim",link:"payment-channel-claim",type:"object",properties:{channel:{$ref:"hash256",description:"256-bit hexadecimal channel identifier."},amount:{$ref:"value",description:"Amount of XRP authorized by this signature."},balance:{$ref:"value",description:"Total XRP balance delivered by this channel after claim is processed."},signature:{$ref:"signature",description:"Signed claim authorizing withdrawal of XRP from the channel. (Required except from the channel's source address.)"},publicKey:{$ref:"publicKey",description:"Public key of the channel. (For verifying the signature.)"},renew:{type:"boolean",description:"Clear the channel's expiration time."},close:{type:"boolean",description:"Request to close the channel. If the channel has no XRP remaining or the destination address requests it, closes the channel immediately (returning unclaimed XRP to the source address). Otherwise, sets the channel to expire after settleDelay seconds have passed."}},required:["channel"],additionalProperties:!1}},dPfI:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"transactionType",link:"transaction-types",description:"The type of the transaction.",type:"string",enum:["payment","order","orderCancellation","trustline","settings","escrowCreation","escrowCancellation","escrowExecution","paymentChannelCreate","paymentChannelFund","paymentChannelClaim","checkCreate","checkCancel","checkCash","depositPreauth","accountDelete"]}},eajV:function(e,t){e.exports={name:"websocket",description:"Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.",keywords:["websocket","websockets","socket","networking","comet","push","RFC-6455","realtime","server","client"],author:"Brian McKelvey <theturtle32@gmail.com> (https://github.com/theturtle32)",contributors:["Iñaki Baz Castillo <ibc@aliax.net> (http://dev.sipdoc.net)"],version:"1.0.31",repository:{type:"git",url:"https://github.com/theturtle32/WebSocket-Node.git"},homepage:"https://github.com/theturtle32/WebSocket-Node",engines:{node:">=0.10.0"},dependencies:{debug:"^2.2.0","es5-ext":"^0.10.50",nan:"^2.14.0","typedarray-to-buffer":"^3.1.5",yaeti:"^0.0.6"},devDependencies:{"buffer-equal":"^1.0.0",faucet:"^0.0.1",gulp:"^4.0.2","gulp-jshint":"^2.0.4","jshint-stylish":"^2.2.1",jshint:"^2.0.0",tape:"^4.9.1"},config:{verbose:!1},scripts:{install:"(node-gyp rebuild 2> builderror.log) || (exit 0)",test:"faucet test/unit",gulp:"gulp"},main:"index",directories:{lib:"./lib"},browser:"lib/browser.js",license:"Apache-2.0"}},ejIc:function(e,t){e.exports={sha224WithRSAEncryption:{sign:"rsa",hash:"sha224",id:"302d300d06096086480165030402040500041c"},"RSA-SHA224":{sign:"ecdsa/rsa",hash:"sha224",id:"302d300d06096086480165030402040500041c"},sha256WithRSAEncryption:{sign:"rsa",hash:"sha256",id:"3031300d060960864801650304020105000420"},"RSA-SHA256":{sign:"ecdsa/rsa",hash:"sha256",id:"3031300d060960864801650304020105000420"},sha384WithRSAEncryption:{sign:"rsa",hash:"sha384",id:"3041300d060960864801650304020205000430"},"RSA-SHA384":{sign:"ecdsa/rsa",hash:"sha384",id:"3041300d060960864801650304020205000430"},sha512WithRSAEncryption:{sign:"rsa",hash:"sha512",id:"3051300d060960864801650304020305000440"},"RSA-SHA512":{sign:"ecdsa/rsa",hash:"sha512",id:"3051300d060960864801650304020305000440"},"RSA-SHA1":{sign:"rsa",hash:"sha1",id:"3021300906052b0e03021a05000414"},"ecdsa-with-SHA1":{sign:"ecdsa",hash:"sha1",id:""},sha256:{sign:"ecdsa",hash:"sha256",id:""},sha224:{sign:"ecdsa",hash:"sha224",id:""},sha384:{sign:"ecdsa",hash:"sha384",id:""},sha512:{sign:"ecdsa",hash:"sha512",id:""},"DSA-SHA":{sign:"dsa",hash:"sha1",id:""},"DSA-SHA1":{sign:"dsa",hash:"sha1",id:""},DSA:{sign:"dsa",hash:"sha1",id:""},"DSA-WITH-SHA224":{sign:"dsa",hash:"sha224",id:""},"DSA-SHA224":{sign:"dsa",hash:"sha224",id:""},"DSA-WITH-SHA256":{sign:"dsa",hash:"sha256",id:""},"DSA-SHA256":{sign:"dsa",hash:"sha256",id:""},"DSA-WITH-SHA384":{sign:"dsa",hash:"sha384",id:""},"DSA-SHA384":{sign:"dsa",hash:"sha384",id:""},"DSA-WITH-SHA512":{sign:"dsa",hash:"sha512",id:""},"DSA-SHA512":{sign:"dsa",hash:"sha512",id:""},"DSA-RIPEMD160":{sign:"dsa",hash:"rmd160",id:""},ripemd160WithRSA:{sign:"rsa",hash:"rmd160",id:"3021300906052b2403020105000414"},"RSA-RIPEMD160":{sign:"rsa",hash:"rmd160",id:"3021300906052b2403020105000414"},md5WithRSAEncryption:{sign:"rsa",hash:"md5",id:"3020300c06082a864886f70d020505000410"},"RSA-MD5":{sign:"rsa",hash:"md5",id:"3020300c06082a864886f70d020505000410"}}},exiO:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"sourceAdjustment",type:"object",oneOf:[{$ref:"sourceExactAdjustment"},{$ref:"maxAdjustment"}]}},fGuJ:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"publicKey",description:"The hexadecimal representation of a secp256k1 or Ed25519 public key.",type:"string",pattern:"^[A-F0-9]+$"}},fWru:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"getBalanceSheetParameters",description:"Parameters for getBalanceSheet",type:"object",properties:{address:{$ref:"address",description:"The XRP Ledger address of the account to get the balance sheet of."},options:{properties:{excludeAddresses:{type:"array",items:{$ref:"address"},uniqueItems:!0,description:"Addresses to exclude from the balance totals."},ledgerVersion:{$ref:"ledgerVersion",description:"Get the balance sheet as of this historical ledger version."}},description:"Options to determine how the balances will be calculated.",additionalProperties:!1}},additionalProperties:!1,required:["address"]}},fhda:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"getPaymentChannelParameters",description:"Parameters for getPaymentChannel",type:"object",properties:{id:{$ref:"hash256",description:"256-bit hexadecimal channel identifier."}},additionalProperties:!1,required:["id"]}},fx7f:function(e,t){},g02S:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"getBalanceSheet",description:"getBalanceSheet response",type:"object",properties:{balances:{type:"array",items:{$ref:"amount"},description:"Amounts issued to the hotwallet accounts from the request. The keys are hot wallet addresses and the values are arrays of currency amounts they hold. The issuer (omitted from the currency amounts) is the account from the request."},assets:{type:"array",items:{$ref:"amount"},description:"Total amounts held that are issued by others. For the recommended gateway configuration, there should be none."},obligations:{type:"array",items:{type:"object",required:["currency","value"],additionalProperties:!1,properties:{currency:{$ref:"currency"},value:{$ref:"value"}},description:"An amount that is owed."},description:"Total amounts issued to accounts that are not hot wallets, as a map of currencies to the total value issued."}},additionalProperties:!1}},g6bR:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"memo",description:"Memo objects represent arbitrary data that can be included in a transaction",type:"object",properties:{type:{pattern:"^[A-Za-z0-9\\-._~:/?#[\\]@!$&'()*+,;=%]*$",description:"Conventionally, a unique relation (according to [RFC 5988](http://tools.ietf.org/html/rfc5988#section-4)) that defines the format of this memo. Only characters allowed in URLs are permitted."},format:{pattern:"^[A-Za-z0-9\\-._~:/?#[\\]@!$&'()*+,;=%]*$",description:"Conventionally containing information on how the memo is encoded, for example as a [MIME type](http://www.iana.org/assignments/media-types/media-types.xhtml). Only characters allowed in URLs are permitted."},data:{type:"string",description:"Arbitrary string, conventionally containing the content of the memo."}},additionalProperties:!1,anyOf:[{required:["data"]},{required:["type"]}]}},gC6J:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"signature",description:"The hexadecimal representation of a signature.",type:"string",pattern:"^[A-F0-9]+$"}},"h/WT":function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"value",link:"value",description:"A string representation of a non-negative floating point number",type:"string",pattern:"^[0-9]*[.]?[0-9]+([eE][-+]?[0-9]+)?$"}},hXGA:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"paymentChannelFund",link:"payment-channel-fund",type:"object",properties:{amount:{$ref:"value",description:"Amount of XRP to fund the channel with."},channel:{$ref:"hash256",description:"256-bit hexadecimal channel identifier."},expiration:{type:"string",format:"date-time",description:"New expiration for this channel. (This does not change the cancelAfter expiration, if the channel has one.) Cannot move the expiration sooner than settleDelay seconds from time of the request."}},required:["amount","channel"],additionalProperties:!1}},"hv/4":function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"api-options",type:"object",properties:{trace:{type:"boolean",description:"If true, log rippled requests and responses to stdout."},feeCushion:{type:"number",minimum:1,description:"Factor to multiply estimated fee by to provide a cushion in case the required fee rises during submission of a transaction. Defaults to `1.2`."},maxFeeXRP:{type:"string",description:"Maximum fee to use with transactions, in XRP. Must be a string-encoded number. Defaults to `'2'`."},server:{type:"string",description:"URI for rippled websocket port to connect to. Must start with `wss://`, `ws://`, `wss+unix://`, or `ws+unix://`.",format:"uri",pattern:"^(wss?|wss?\\+unix)://"},proxy:{format:"uri",description:"URI for HTTP/HTTPS proxy to use to connect to the rippled server."},timeout:{type:"integer",description:"Timeout in milliseconds before considering a request to have failed.",minimum:1},proxyAuthorization:{type:"string",description:"Username and password for HTTP basic authentication to the proxy in the format **username:password**."},authorization:{type:"string",description:"Username and password for HTTP basic authentication to the rippled server in the format **username:password**."},trustedCertificates:{type:"array",description:"Array of PEM-formatted SSL certificates to trust when connecting to a proxy. This is useful if you want to use a self-signed certificate on the proxy server. Note: Each element must contain a single certificate; concatenated certificates are not valid.",items:{type:"string",description:"A PEM-formatted SSL certificate to trust when connecting to a proxy."}},key:{type:"string",description:"A string containing the private key of the client in PEM format. (Can be an array of keys)."},passphrase:{type:"string",description:"The passphrase for the private key of the client."},certificate:{type:"string",description:"A string containing the certificate key of the client in PEM format. (Can be an array of certificates)."}},additionalProperties:!1}},iqDM:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"verifyPaymentChannelClaimParameters",type:"object",properties:{channel:{$ref:"hash256",description:"256-bit hexadecimal channel identifier."},amount:{$ref:"value",description:"Amount of XRP authorized by the claim."},signature:{$ref:"signature",description:"Signature of this claim."},publicKey:{$ref:"publicKey",description:"Public key of the channel's sender"}},additionalProperties:!1,required:["channel","amount","signature","publicKey"]}},jOmV:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"preparePaymentChannelFundParameters",type:"object",properties:{address:{$ref:"address",description:"The address of the account that is creating the transaction."},paymentChannelFund:{$ref:"paymentChannelFund",description:"The channel to fund, and the details of how to fund it."},instructions:{$ref:"instructions"}},additionalProperties:!1,required:["address","paymentChannelFund"]}},koUH:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"orderCancellation",link:"order-cancellation",type:"object",properties:{orderSequence:{$ref:"sequence",description:"The [account sequence number](#account-sequence-number) of the order to cancel."},memos:{$ref:"memos"}},required:["orderSequence"],additionalProperties:!1}},kwJH:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"prepareEscrowExecutionParameters",type:"object",properties:{address:{$ref:"address",description:"The address of the account that is creating the transaction."},escrowExecution:{$ref:"escrowExecution",description:"The specification of the escrow execution to prepare."},instructions:{$ref:"instructions"}},additionalProperties:!1,required:["address","escrowExecution"]}},llkx:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"prepareOrderCancellationParameters",type:"object",properties:{address:{$ref:"address",description:"The address of the account that is creating the transaction."},orderCancellation:{$ref:"orderCancellation",description:"The specification of the order cancellation to prepare."},instructions:{$ref:"instructions"}},additionalProperties:!1,required:["address","orderCancellation"]}},"nB+B":function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"signPaymentChannelClaim",type:"string",$ref:"signature",additionalProperties:!1}},nHAa:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"paymentChannelCreate",link:"payment-channel-create",type:"object",properties:{amount:{$ref:"value",description:"Amount of XRP for sender to set aside in this channel."},destination:{$ref:"address",description:"Address to receive XRP claims against this channel."},settleDelay:{type:"number",description:"Amount of seconds the source address must wait before closing the channel if it has unclaimed XRP."},publicKey:{$ref:"publicKey",description:"Public key of the key pair the source may use to sign claims against this channel."},cancelAfter:{type:"string",format:"date-time",description:"Time when this channel expires. This expiration cannot be changed after creating the channel."},sourceTag:{$ref:"tag",description:"Source tag."},destinationTag:{$ref:"tag",description:"Destination tag."}},required:["amount","destination","settleDelay","publicKey"],additionalProperties:!1}},o2I4:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"signParameters",type:"object",properties:{txJSON:{type:"string",description:"Transaction represented as a JSON string in rippled format."},secret:{type:"string",format:"secret",description:"The secret of the account that is initiating the transaction. (This field cannot be used with keypair)."},keypair:{type:"object",properties:{privateKey:{type:"privateKey",description:"The uppercase hexadecimal representation of the secp256k1 or Ed25519 private key."},publicKey:{type:"publicKey",description:"The uppercase hexadecimal representation of the secp256k1 or Ed25519 public key."}},description:"The private and public key of the account that is initiating the transaction. (This field cannot be used with secret).",required:["privateKey","publicKey"],additionalProperties:!1},options:{type:"object",description:"Options that control the type of signature that will be generated.",properties:{signAs:{$ref:"address",description:"The account that the signature should count for in multisigning."}},additionalProperties:!1}},additionalProperties:!1,required:["txJSON"],oneOf:[{required:["secret"],not:{required:["keypair"]}},{required:["keypair"],not:{required:["secret"]}}]}},oD6P:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"trustline",link:"trustline",type:"object",properties:{currency:{$ref:"currency",description:"The currency this trustline applies to."},counterparty:{$ref:"address",description:"The address of the account this trustline extends trust to."},limit:{$ref:"value",description:"The maximum amount that the owner of the trustline can be owed through the trustline."},qualityIn:{$ref:"quality",description:"Incoming balances on this trustline are valued at this ratio."},qualityOut:{$ref:"quality",description:"Outgoing balances on this trustline are valued at this ratio."},ripplingDisabled:{type:"boolean",description:"If true, payments cannot ripple through this trustline."},authorized:{type:"boolean",description:"If true, authorize the counterparty to hold issuances from this account."},frozen:{type:"boolean",description:"If true, the trustline is frozen, which means that funds can only be sent to the owner."},memos:{$ref:"memos"}},required:["currency","counterparty","limit"],additionalProperties:!1}},oX0n:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"ledgerEvent",description:"A ledger event message",type:"object",properties:{baseFeeXRP:{$ref:"value",description:"Base fee, in XRP."},ledgerHash:{$ref:"hash256",description:"Unique hash of the ledger that was closed, as hex."},ledgerVersion:{$ref:"ledgerVersion",description:"Ledger version of the ledger that closed."},ledgerTimestamp:{type:"string",format:"date-time",description:"The time at which this ledger closed."},reserveBaseXRP:{$ref:"value",description:"The minimum reserve, in XRP, that is required for an account."},reserveIncrementXRP:{$ref:"value",description:"The increase in account reserve that is added for each item the account owns, such as offers or trust lines."},transactionCount:{type:"integer",minimum:0,description:"Number of new transactions included in this ledger."},validatedLedgerVersions:{type:"string",description:"Range of ledgers that the server has available. This may be discontiguous."}},addtionalProperties:!1,required:["baseFeeXRP","ledgerHash","ledgerTimestamp","reserveBaseXRP","reserveIncrementXRP","transactionCount","ledgerVersion","validatedLedgerVersions"]}},oZI4:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"escrowCancellation",link:"escrow-cancellation",type:"object",properties:{memos:{$ref:"memos"},owner:{$ref:"address",description:"The address of the owner of the escrow to cancel."},escrowSequence:{$ref:"sequence",description:"The [account sequence number](#account-sequence-number) of the [Escrow Creation](#escrow-creation) transaction for the escrow to cancel."}},required:["owner","escrowSequence"],additionalProperties:!1}},obEB:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"escrowExecution",link:"escrow-execution",type:"object",properties:{memos:{$ref:"memos"},owner:{$ref:"address",description:"The address of the owner of the escrow to execute."},escrowSequence:{$ref:"sequence",description:"The [account sequence number](#account-sequence-number) of the [Escrow Creation](#escrow-creation) transaction for the escrow to execute."},condition:{type:"string",description:"A hex value representing a [PREIMAGE-SHA-256 crypto-condition](https://tools.ietf.org/html/draft-thomas-crypto-conditions-02#section-8.1). This must match the original `condition` from the escrow creation transaction.",pattern:"^[A-F0-9]{0,256}$"},fulfillment:{type:"string",description:"A hex value representing the [PREIMAGE-SHA-256 crypto-condition](https://tools.ietf.org/html/draft-thomas-crypto-conditions-02#section-8.1) fulfillment for `condition`.",pattern:"^[A-F0-9]+$"}},required:["owner","escrowSequence"],additionalProperties:!1}},ocoO:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"getBalancesParameters",description:"Parameters for getBalances",type:"object",properties:{address:{$ref:"address",description:"The address of the account to get balances for."},options:{description:"Options to filter and determine which balances to return.",properties:{counterparty:{$ref:"address",description:"Only return balances with this counterparty."},currency:{$ref:"currency",description:"Only return balances for this currency."},limit:{type:"integer",minimum:1,description:"Return at most this many balances."},ledgerVersion:{$ref:"ledgerVersion",description:"Return balances as they were in this historical ledger version."}},additionalProperties:!1}},additionalProperties:!1,required:["address"]}},ot6o:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"destinationAddressTag",description:"A destination address and optional tag, with no amount included. When parsing an incoming transaction, the original specification's amount is hidden to prevent misinterpretation. For the amount that the transaction delivered, see `outcome.deliveredAmount`.",type:"object",properties:{address:{$ref:"address",description:"An address representing the destination of the transaction."},tag:{$ref:"tag"}},required:["address"],additionalProperties:!1}},pMCD:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"sequence",link:"account-sequence-number",description:"An account transaction sequence number",type:"integer",minimum:1}},pr2P:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"generateAddressParameters",type:"object",properties:{options:{type:"object",description:"Options to control how the address and secret are generated.",properties:{entropy:{type:"array",items:{type:"integer",minimum:0,maximum:255},description:"The entropy to use to generate the seed. Must be an array of length 16 with values from 0-255 (16 bytes of entropy)"},algorithm:{type:"string",enum:["ecdsa-secp256k1","ed25519"],description:"The digital signature algorithm to generate an address for. Can be `ecdsa-secp256k1` (default) or `ed25519`."},test:{type:"boolean",description:"Specifies whether the address is intended for use on a test network such as Testnet or Devnet. If `true`, the address should only be used for testing, and will start with `T`. If `false`, the address should only be used on mainnet, and will start with `X`."},includeClassicAddress:{type:"boolean",description:"If `true`, return the classic address, in addition to the X-address."}},additionalProperties:!1}},additionalProperties:!1}},qkh7:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"order",link:"order",type:"object",properties:{direction:{type:"string",enum:["buy","sell"],description:'Equal to "buy" for buy orders and "sell" for sell orders.'},quantity:{$ref:"amount",description:"The amount of currency to buy or sell."},totalPrice:{$ref:"amount",description:"The total price to be paid for the `quantity` to be bought or sold."},immediateOrCancel:{type:"boolean",description:"Treat the offer as an [Immediate or Cancel order](http://en.wikipedia.org/wiki/Immediate_or_cancel). If enabled, the offer will never become a ledger node: it only attempts to match existing offers in the ledger. This cannot be used with `fillOrKill`."},fillOrKill:{type:"boolean",description:"Treat the offer as a [Fill or Kill order](http://en.wikipedia.org/wiki/Fill_or_kill). Only attempt to match existing offers in the ledger, and only do so if the entire quantity can be exchanged. This cannot be used with `immediateOrCancel`."},passive:{description:"If enabled, the offer will not consume offers that exactly match it, and instead becomes an Offer node in the ledger. It will still consume offers that cross it.",type:"boolean"},expirationTime:{type:"string",format:"date-time",description:"Time after which the offer is no longer active, as an [ISO 8601 date-time](https://en.wikipedia.org/wiki/ISO_8601)."},orderToReplace:{$ref:"sequence",description:"The [account sequence number](#account-sequence-number) of an order to cancel before the new order is created, effectively replacing the old order."},memos:{$ref:"memos"}},required:["direction","quantity","totalPrice"],additionalProperties:!1,not:{description:"immediateOrCancel and fillOrKill are mutually exclusive",required:["immediateOrCancel","fillOrKill"]}}},qwf1:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"prepareTrustlineParameters",type:"object",properties:{address:{$ref:"address",description:"The address of the account that is creating the transaction."},trustline:{$ref:"trustline",description:"The specification of the trustline to prepare."},instructions:{$ref:"instructions"}},additionalProperties:!1,required:["address","trustline"]}},rUOe:function(e,t){},t68F:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"orderbookOrders",type:"array",items:{description:"An order in the order book.",type:"object",properties:{specification:{$ref:"order",description:"An order specification that would create an order equivalent to the current state of this order."},properties:{description:"Properties of the order not in the specification.",type:"object",properties:{maker:{$ref:"address",description:"The address of the account that submitted the order."},sequence:{$ref:"sequence",description:"The account sequence number of the transaction that created this order."},makerExchangeRate:{$ref:"value",description:'The exchange rate from the point of view of the account that submitted the order (also known as "quality").'}},required:["maker","sequence","makerExchangeRate"],addtionalProperties:!1},state:{description:"The state of the order.",type:"object",properties:{fundedAmount:{$ref:"amount",description:"How much of the amount the maker would have to pay that the maker currently holds."},priceOfFundedAmount:{$ref:"amount",description:"How much the `fundedAmount` would convert to through the exchange rate of this order."}},required:["fundedAmount","priceOfFundedAmount"],additionalProperties:!1},data:{description:"The raw order data. This may include `owner_funds`, `Flags`, and other fields.",type:"object",additionalProperties:!0}},required:["specification","properties","data"],additionalProperties:!1}}},tbQP:function(e,t){e.exports={TYPES:{Validation:10003,Done:-1,Hash128:4,Blob:7,AccountID:8,Amount:6,Hash256:5,UInt8:16,Vector256:19,STObject:14,Unknown:-2,Transaction:10001,Hash160:17,PathSet:18,LedgerEntry:10002,UInt16:1,NotPresent:0,UInt64:3,UInt32:2,STArray:15},LEDGER_ENTRY_TYPES:{Any:-3,Child:-2,Invalid:-1,AccountRoot:97,DirectoryNode:100,RippleState:114,Ticket:84,SignerList:83,Offer:111,LedgerHashes:104,Amendments:102,FeeSettings:115,Escrow:117,PayChannel:120,DepositPreauth:112,Check:67,Nickname:110,Contract:99,GeneratorMap:103},FIELDS:[["Generic",{nth:0,isVLEncoded:!1,isSerialized:!1,isSigningField:!1,type:"Unknown"}],["Invalid",{nth:-1,isVLEncoded:!1,isSerialized:!1,isSigningField:!1,type:"Unknown"}],["LedgerEntryType",{nth:1,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt16"}],["TransactionType",{nth:2,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt16"}],["SignerWeight",{nth:3,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt16"}],["Flags",{nth:2,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["SourceTag",{nth:3,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["Sequence",{nth:4,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["PreviousTxnLgrSeq",{nth:5,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["LedgerSequence",{nth:6,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["CloseTime",{nth:7,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["ParentCloseTime",{nth:8,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["SigningTime",{nth:9,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["Expiration",{nth:10,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["TransferRate",{nth:11,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["WalletSize",{nth:12,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["OwnerCount",{nth:13,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["DestinationTag",{nth:14,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["HighQualityIn",{nth:16,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["HighQualityOut",{nth:17,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["LowQualityIn",{nth:18,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["LowQualityOut",{nth:19,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["QualityIn",{nth:20,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["QualityOut",{nth:21,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["StampEscrow",{nth:22,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["BondAmount",{nth:23,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["LoadFee",{nth:24,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["OfferSequence",{nth:25,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["FirstLedgerSequence",{nth:26,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["LastLedgerSequence",{nth:27,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["TransactionIndex",{nth:28,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["OperationLimit",{nth:29,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["ReferenceFeeUnits",{nth:30,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["ReserveBase",{nth:31,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["ReserveIncrement",{nth:32,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["SetFlag",{nth:33,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["ClearFlag",{nth:34,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["SignerQuorum",{nth:35,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["CancelAfter",{nth:36,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["FinishAfter",{nth:37,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["IndexNext",{nth:1,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt64"}],["IndexPrevious",{nth:2,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt64"}],["BookNode",{nth:3,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt64"}],["OwnerNode",{nth:4,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt64"}],["BaseFee",{nth:5,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt64"}],["ExchangeRate",{nth:6,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt64"}],["LowNode",{nth:7,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt64"}],["HighNode",{nth:8,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt64"}],["EmailHash",{nth:1,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Hash128"}],["LedgerHash",{nth:1,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Hash256"}],["ParentHash",{nth:2,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Hash256"}],["TransactionHash",{nth:3,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Hash256"}],["AccountHash",{nth:4,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Hash256"}],["PreviousTxnID",{nth:5,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Hash256"}],["LedgerIndex",{nth:6,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Hash256"}],["WalletLocator",{nth:7,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Hash256"}],["RootIndex",{nth:8,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Hash256"}],["AccountTxnID",{nth:9,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Hash256"}],["BookDirectory",{nth:16,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Hash256"}],["InvoiceID",{nth:17,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Hash256"}],["Nickname",{nth:18,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Hash256"}],["Amendment",{nth:19,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Hash256"}],["TicketID",{nth:20,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Hash256"}],["Digest",{nth:21,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Hash256"}],["hash",{nth:257,isVLEncoded:!1,isSerialized:!1,isSigningField:!1,type:"Hash256"}],["index",{nth:258,isVLEncoded:!1,isSerialized:!1,isSigningField:!1,type:"Hash256"}],["Amount",{nth:1,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Amount"}],["Balance",{nth:2,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Amount"}],["LimitAmount",{nth:3,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Amount"}],["TakerPays",{nth:4,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Amount"}],["TakerGets",{nth:5,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Amount"}],["LowLimit",{nth:6,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Amount"}],["HighLimit",{nth:7,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Amount"}],["Fee",{nth:8,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Amount"}],["SendMax",{nth:9,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Amount"}],["DeliverMin",{nth:10,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Amount"}],["MinimumOffer",{nth:16,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Amount"}],["RippleEscrow",{nth:17,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Amount"}],["DeliveredAmount",{nth:18,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Amount"}],["taker_gets_funded",{nth:258,isVLEncoded:!1,isSerialized:!1,isSigningField:!1,type:"Amount"}],["taker_pays_funded",{nth:259,isVLEncoded:!1,isSerialized:!1,isSigningField:!1,type:"Amount"}],["PublicKey",{nth:1,isVLEncoded:!0,isSerialized:!0,isSigningField:!0,type:"Blob"}],["MessageKey",{nth:2,isVLEncoded:!0,isSerialized:!0,isSigningField:!0,type:"Blob"}],["SigningPubKey",{nth:3,isVLEncoded:!0,isSerialized:!0,isSigningField:!0,type:"Blob"}],["TxnSignature",{nth:4,isVLEncoded:!0,isSerialized:!0,isSigningField:!1,type:"Blob"}],["Generator",{nth:5,isVLEncoded:!0,isSerialized:!0,isSigningField:!0,type:"Blob"}],["Signature",{nth:6,isVLEncoded:!0,isSerialized:!0,isSigningField:!1,type:"Blob"}],["Domain",{nth:7,isVLEncoded:!0,isSerialized:!0,isSigningField:!0,type:"Blob"}],["FundCode",{nth:8,isVLEncoded:!0,isSerialized:!0,isSigningField:!0,type:"Blob"}],["RemoveCode",{nth:9,isVLEncoded:!0,isSerialized:!0,isSigningField:!0,type:"Blob"}],["ExpireCode",{nth:10,isVLEncoded:!0,isSerialized:!0,isSigningField:!0,type:"Blob"}],["CreateCode",{nth:11,isVLEncoded:!0,isSerialized:!0,isSigningField:!0,type:"Blob"}],["MemoType",{nth:12,isVLEncoded:!0,isSerialized:!0,isSigningField:!0,type:"Blob"}],["MemoData",{nth:13,isVLEncoded:!0,isSerialized:!0,isSigningField:!0,type:"Blob"}],["MemoFormat",{nth:14,isVLEncoded:!0,isSerialized:!0,isSigningField:!0,type:"Blob"}],["Fulfillment",{nth:16,isVLEncoded:!0,isSerialized:!0,isSigningField:!0,type:"Blob"}],["Condition",{nth:17,isVLEncoded:!0,isSerialized:!0,isSigningField:!0,type:"Blob"}],["MasterSignature",{nth:18,isVLEncoded:!0,isSerialized:!0,isSigningField:!1,type:"Blob"}],["Account",{nth:1,isVLEncoded:!0,isSerialized:!0,isSigningField:!0,type:"AccountID"}],["Owner",{nth:2,isVLEncoded:!0,isSerialized:!0,isSigningField:!0,type:"AccountID"}],["Destination",{nth:3,isVLEncoded:!0,isSerialized:!0,isSigningField:!0,type:"AccountID"}],["Issuer",{nth:4,isVLEncoded:!0,isSerialized:!0,isSigningField:!0,type:"AccountID"}],["Authorize",{nth:5,isVLEncoded:!0,isSerialized:!0,isSigningField:!0,type:"AccountID"}],["Unauthorize",{nth:6,isVLEncoded:!0,isSerialized:!0,isSigningField:!0,type:"AccountID"}],["Target",{nth:7,isVLEncoded:!0,isSerialized:!0,isSigningField:!0,type:"AccountID"}],["RegularKey",{nth:8,isVLEncoded:!0,isSerialized:!0,isSigningField:!0,type:"AccountID"}],["ObjectEndMarker",{nth:1,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"STObject"}],["TransactionMetaData",{nth:2,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"STObject"}],["CreatedNode",{nth:3,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"STObject"}],["DeletedNode",{nth:4,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"STObject"}],["ModifiedNode",{nth:5,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"STObject"}],["PreviousFields",{nth:6,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"STObject"}],["FinalFields",{nth:7,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"STObject"}],["NewFields",{nth:8,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"STObject"}],["TemplateEntry",{nth:9,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"STObject"}],["Memo",{nth:10,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"STObject"}],["SignerEntry",{nth:11,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"STObject"}],["Signer",{nth:16,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"STObject"}],["Majority",{nth:18,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"STObject"}],["ArrayEndMarker",{nth:1,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"STArray"}],["Signers",{nth:3,isVLEncoded:!1,isSerialized:!0,isSigningField:!1,type:"STArray"}],["SignerEntries",{nth:4,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"STArray"}],["Template",{nth:5,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"STArray"}],["Necessary",{nth:6,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"STArray"}],["Sufficient",{nth:7,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"STArray"}],["AffectedNodes",{nth:8,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"STArray"}],["Memos",{nth:9,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"STArray"}],["Majorities",{nth:16,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"STArray"}],["CloseResolution",{nth:1,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt8"}],["Method",{nth:2,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt8"}],["TransactionResult",{nth:3,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt8"}],["TakerPaysCurrency",{nth:1,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Hash160"}],["TakerPaysIssuer",{nth:2,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Hash160"}],["TakerGetsCurrency",{nth:3,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Hash160"}],["TakerGetsIssuer",{nth:4,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Hash160"}],["Paths",{nth:1,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"PathSet"}],["Indexes",{nth:1,isVLEncoded:!0,isSerialized:!0,isSigningField:!0,type:"Vector256"}],["Hashes",{nth:2,isVLEncoded:!0,isSerialized:!0,isSigningField:!0,type:"Vector256"}],["Amendments",{nth:3,isVLEncoded:!0,isSerialized:!0,isSigningField:!0,type:"Vector256"}],["Transaction",{nth:1,isVLEncoded:!1,isSerialized:!1,isSigningField:!1,type:"Transaction"}],["LedgerEntry",{nth:1,isVLEncoded:!1,isSerialized:!1,isSigningField:!1,type:"LedgerEntry"}],["Validation",{nth:1,isVLEncoded:!1,isSerialized:!1,isSigningField:!1,type:"Validation"}],["SignerListID",{nth:38,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["SettleDelay",{nth:39,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt32"}],["Channel",{nth:22,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Hash256"}],["ConsensusHash",{nth:23,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Hash256"}],["CheckID",{nth:24,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"Hash256"}],["TickSize",{nth:16,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt8"}],["DestinationNode",{nth:9,isVLEncoded:!1,isSerialized:!0,isSigningField:!0,type:"UInt64"}]],TRANSACTION_RESULTS:{telLOCAL_ERROR:-399,telBAD_DOMAIN:-398,telBAD_PATH_COUNT:-397,telBAD_PUBLIC_KEY:-396,telFAILED_PROCESSING:-395,telINSUF_FEE_P:-394,telNO_DST_PARTIAL:-393,telCAN_NOT_QUEUE:-392,telCAN_NOT_QUEUE_BALANCE:-391,telCAN_NOT_QUEUE_BLOCKS:-390,telCAN_NOT_QUEUE_BLOCKED:-389,telCAN_NOT_QUEUE_FEE:-388,telCAN_NOT_QUEUE_FULL:-387,temMALFORMED:-299,temBAD_AMOUNT:-298,temBAD_CURRENCY:-297,temBAD_EXPIRATION:-296,temBAD_FEE:-295,temBAD_ISSUER:-294,temBAD_LIMIT:-293,temBAD_OFFER:-292,temBAD_PATH:-291,temBAD_PATH_LOOP:-290,temBAD_REGKEY:-289,temBAD_SEND_XRP_LIMIT:-288,temBAD_SEND_XRP_MAX:-287,temBAD_SEND_XRP_NO_DIRECT:-286,temBAD_SEND_XRP_PARTIAL:-285,temBAD_SEND_XRP_PATHS:-284,temBAD_SEQUENCE:-283,temBAD_SIGNATURE:-282,temBAD_SRC_ACCOUNT:-281,temBAD_TRANSFER_RATE:-280,temDST_IS_SRC:-279,temDST_NEEDED:-278,temINVALID:-277,temINVALID_FLAG:-276,temREDUNDANT:-275,temRIPPLE_EMPTY:-274,temDISABLED:-273,temBAD_SIGNER:-272,temBAD_QUORUM:-271,temBAD_WEIGHT:-270,temBAD_TICK_SIZE:-269,temINVALID_ACCOUNT_ID:-268,temCANNOT_PREAUTH_SELF:-267,temUNCERTAIN:-266,temUNKNOWN:-265,tefFAILURE:-199,tefALREADY:-198,tefBAD_ADD_AUTH:-197,tefBAD_AUTH:-196,tefBAD_LEDGER:-195,tefCREATED:-194,tefEXCEPTION:-193,tefINTERNAL:-192,tefNO_AUTH_REQUIRED:-191,tefPAST_SEQ:-190,tefWRONG_PRIOR:-189,tefMASTER_DISABLED:-188,tefMAX_LEDGER:-187,tefBAD_SIGNATURE:-186,tefBAD_QUORUM:-185,tefNOT_MULTI_SIGNING:-184,tefBAD_AUTH_MASTER:-183,tefINVARIANT_FAILED:-182,tefTOO_BIG:-181,terRETRY:-99,terFUNDS_SPENT:-98,terINSUF_FEE_B:-97,terNO_ACCOUNT:-96,terNO_AUTH:-95,terNO_LINE:-94,terOWNERS:-93,terPRE_SEQ:-92,terLAST:-91,terNO_RIPPLE:-90,terQUEUED:-89,tesSUCCESS:0,tecCLAIM:100,tecPATH_PARTIAL:101,tecUNFUNDED_ADD:102,tecUNFUNDED_OFFER:103,tecUNFUNDED_PAYMENT:104,tecFAILED_PROCESSING:105,tecDIR_FULL:121,tecINSUF_RESERVE_LINE:122,tecINSUF_RESERVE_OFFER:123,tecNO_DST:124,tecNO_DST_INSUF_XRP:125,tecNO_LINE_INSUF_RESERVE:126,tecNO_LINE_REDUNDANT:127,tecPATH_DRY:128,tecUNFUNDED:129,tecNO_ALTERNATIVE_KEY:130,tecNO_REGULAR_KEY:131,tecOWNERS:132,tecNO_ISSUER:133,tecNO_AUTH:134,tecNO_LINE:135,tecINSUFF_FEE:136,tecFROZEN:137,tecNO_TARGET:138,tecNO_PERMISSION:139,tecNO_ENTRY:140,tecINSUFFICIENT_RESERVE:141,tecNEED_MASTER_KEY:142,tecDST_TAG_NEEDED:143,tecINTERNAL:144,tecOVERSIZE:145,tecCRYPTOCONDITION_ERROR:146,tecINVARIANT_FAILED:147,tecEXPIRED:148,tecDUPLICATE:149,tecKILLED:150,tecHAS_OBLIGATIONS:151,tecTOO_SOON:152},TRANSACTION_TYPES:{Invalid:-1,Payment:0,EscrowCreate:1,EscrowFinish:2,AccountSet:3,EscrowCancel:4,SetRegularKey:5,NickNameSet:6,OfferCreate:7,OfferCancel:8,Contract:9,TicketCreate:10,TicketCancel:11,SignerListSet:12,PaymentChannelCreate:13,PaymentChannelFund:14,PaymentChannelClaim:15,CheckCreate:16,CheckCash:17,CheckCancel:18,DepositPreauth:19,TrustSet:20,AccountDelete:21,EnableAmendment:100,SetFee:101}}},tds9:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"orderChange",type:"object",description:"A change to an order.",properties:{direction:{type:"string",enum:["buy","sell"],description:'Equal to "buy" for buy orders and "sell" for sell orders.'},quantity:{$ref:"amount",description:"The amount to be bought or sold by the maker."},totalPrice:{$ref:"amount",description:"The total amount to be paid or received by the taker."},makerExchangeRate:{$ref:"value",description:"The exchange rate between the `quantity` currency and the `totalPrice` currency from the point of view of the maker."},sequence:{$ref:"sequence",description:"The order sequence number, used to identify the order for cancellation"},status:{enum:["created","filled","partially-filled","cancelled"],description:'The status of the order. One of "created", "filled", "partially-filled", "cancelled".'},expirationTime:{type:"string",format:"date-time",description:"The time after which the order expires, if any."}},required:["direction","quantity","totalPrice","sequence","status"],additionalProperties:!1}},tvCE:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"getLedger",type:"object",properties:{stateHash:{$ref:"hash256",description:"Hash of all state information in this ledger."},closeTime:{type:"string",format:"date-time",description:"The time at which this ledger was closed."},closeTimeResolution:{type:"integer",minimum:1,description:"Approximate number of seconds between closing one ledger version and closing the next one."},closeFlags:{type:"integer",minimum:0,description:'A bit-map of flags relating to the closing of this ledger. Currently, the ledger has only one flag defined for `closeFlags`: **sLCF_NoConsensusTime** (value 1). If this flag is enabled, it means that validators were in conflict regarding the correct close time for the ledger, but built otherwise the same ledger, so they declared consensus while "agreeing to disagree" on the close time. In this case, the consensus ledger contains a `closeTime` value that is 1 second after that of the previous ledger. (In this case, there is no official close time, but the actual real-world close time is probably 3-6 seconds later than the specified `closeTime`.)'},ledgerHash:{$ref:"hash256",description:"Unique identifying hash of the entire ledger."},ledgerVersion:{$ref:"ledgerVersion",description:"The ledger version of this ledger."},parentLedgerHash:{$ref:"hash256",description:"Unique identifying hash of the ledger that came immediately before this one."},parentCloseTime:{type:"string",format:"date-time",description:"The time at which the previous ledger was closed."},totalDrops:{$ref:"value",description:"Total number of drops (1/1,000,000th of an XRP) in the network, as a quoted integer. (This decreases as transaction fees cause XRP to be destroyed.)"},transactionHash:{$ref:"hash256",description:"Hash of the transaction information included in this ledger."},transactions:{description:"Array of all transactions that were validated in this ledger. Transactions are represented in the same format as the return value of [getTransaction](#gettransaction).",type:"array",items:{$ref:"getTransaction",description:"A transaction in the same format as the return value of [getTransaction](#gettransaction)."}},transactionHashes:{description:"An array of hashes of all transactions that were validated in this ledger.",type:"array",items:{$ref:"transactionHash"}},rawState:{type:"string",description:"A JSON string containing all state data for this ledger in rippled JSON format."},stateHashes:{description:"An array of hashes of all state data in this ledger.",type:"array",items:{$ref:"hash256"}}},required:["stateHash","closeTime","closeTimeResolution","closeFlags","ledgerHash","ledgerVersion","parentLedgerHash","parentCloseTime","totalDrops","transactionHash"],additionalProperties:!1}},uQRB:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"minAdjustment",type:"object",properties:{address:{$ref:"address",description:"An address representing the destination of the transaction."},minAmount:{$ref:"laxAmount",description:"The minimum amount to be delivered. (This field cannot be used with destination.amount)"},tag:{$ref:"tag"}},required:["address","minAmount"],additionalProperties:!1}},xFFk:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"signedValue",description:"A string representation of a floating point number",type:"string",link:"value",pattern:"^[-]?[0-9]*[.]?[0-9]+([eE][-+]?[0-9]+)?$"}},xGks:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"escrowCreation",link:"escrow-creation",type:"object",properties:{amount:{$ref:"value",description:"Amount of XRP for sender to escrow."},destination:{$ref:"address",description:"Address to receive escrowed XRP."},memos:{$ref:"memos"},condition:{type:"string",description:"A hex value representing a [PREIMAGE-SHA-256 crypto-condition](https://tools.ietf.org/html/draft-thomas-crypto-conditions-02#section-8.1). If present, `fulfillment` is required upon execution.",pattern:"^[A-F0-9]{0,256}$"},allowCancelAfter:{type:"string",format:"date-time",description:"If present, the escrow may be cancelled after this time."},allowExecuteAfter:{type:"string",format:"date-time",description:"If present, the escrow can not be executed before this time."},sourceTag:{$ref:"tag",description:"Source tag."},destinationTag:{$ref:"tag",description:"Destination tag."}},required:["amount","destination"],additionalProperties:!1}},xLe4:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"classicAddress",description:"A classic address (Account ID) for the XRP Ledger",type:"string",format:"classicAddress",link:"classic-address",pattern:"^r[1-9A-HJ-NP-Za-km-z]{24,34}$"}},xfJ5:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"address",description:"An account address on the XRP Ledger",type:"string",format:"address",link:"address",oneOf:[{$ref:"xAddress"},{$ref:"classicAddress"}]}},xieK:function(e,t){e.exports={name:"elliptic",version:"5.2.1",description:"EC cryptography",main:"lib/elliptic.js",scripts:{test:"make lint && istanbul test _mocha --reporter=spec test/*-test.js",coveralls:"cat ./coverage/lcov.info | coveralls"},repository:{type:"git",url:"git@github.com:indutny/elliptic"},keywords:["EC","Elliptic","curve","Cryptography"],author:"Fedor Indutny <fedor@indutny.com>",license:"MIT",bugs:{url:"https://github.com/indutny/elliptic/issues"},homepage:"https://github.com/indutny/elliptic",devDependencies:{browserify:"^3.44.2",coveralls:"^2.11.3",istanbul:"^0.3.17",jscs:"^1.11.3",jshint:"^2.6.0",mocha:"^2.1.0","uglify-js":"^2.4.13"},dependencies:{"bn.js":"^3.1.1",brorand:"^1.0.1","hash.js":"^1.0.0",inherits:"^2.0.1"}}},yutW:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"getTransaction",description:"getTransaction response",link:"gettransaction",properties:{type:{$ref:"transactionType"},specification:{description:"A specification that would produce the same outcome as this transaction. *Exception:* For payment transactions, this omits the `destination.amount` field, to prevent misunderstanding. The structure of the specification depends on the value of the `type` field (see [Transaction Types](#transaction-types) for details). *Note:* This is **not** necessarily the same as the original specification."},outcome:{$ref:"outcome",description:"The outcome of the transaction (what effects it had)."},id:{$ref:"transactionHash",description:"A hash of the transaction that can be used to identify it."},address:{$ref:"address",description:"The address of the account that initiated the transaction."},sequence:{$ref:"sequence",description:"The account sequence number of the transaction for the account that initiated it."},rawTransaction:{description:"The raw transaction data as a JSON string. For advanced users only; exercise caution when interpreting this data.",type:"string"}},required:["id","address","sequence","type","specification","outcome"],additionalProperties:!1,oneOf:[{properties:{type:{enum:["payment"]},specification:{$ref:"getPayment"}}},{properties:{type:{enum:["order"]},specification:{$ref:"order"}}},{properties:{type:{enum:["orderCancellation"]},specification:{$ref:"orderCancellation"}}},{properties:{type:{enum:["trustline"]},specification:{$ref:"trustline"}}},{properties:{type:{enum:["settings"]},specification:{$ref:"getSettings"}}},{properties:{type:{enum:["checkCreate"]},specification:{$ref:"checkCreate"}}},{properties:{type:{enum:["checkCancel"]},specification:{$ref:"checkCancel"}}},{properties:{type:{enum:["checkCash"]},specification:{$ref:"checkCash"}}},{properties:{type:{enum:["escrowCreation"]},specification:{$ref:"escrowCreation"}}},{properties:{type:{enum:["escrowCancellation"]},specification:{$ref:"escrowCancellation"}}},{properties:{type:{enum:["escrowExecution"]},specification:{$ref:"escrowExecution"}}},{properties:{type:{enum:["paymentChannelCreate"]},specification:{$ref:"paymentChannelCreate"}}},{properties:{type:{enum:["paymentChannelFund"]},specification:{$ref:"paymentChannelFund"}}},{properties:{type:{enum:["paymentChannelClaim"]},specification:{$ref:"paymentChannelClaim"}}},{properties:{type:{enum:["depositPreauth"]},specification:{$ref:"depositPreauth"}}},{properties:{type:{enum:["accountDelete"]},specification:{$ref:"accountDelete"}}}]}},zPNX:function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",title:"getPaymentChannel",type:"object",properties:{account:{$ref:"address",description:"Address that created the payment channel."},destination:{$ref:"address",description:"Address to receive XRP claims against this channel."},amount:{$ref:"value",description:"The total amount of XRP funded in this channel."},balance:{$ref:"value",description:"The total amount of XRP delivered by this channel."},settleDelay:{type:"number",description:"Amount of seconds the source address must wait before closing the channel if it has unclaimed XRP."},expiration:{type:"string",format:"date-time",description:"Time when this channel expires."},publicKey:{$ref:"publicKey",description:"Public key of the key pair the source will use to sign claims against this channel."},cancelAfter:{type:"string",format:"date-time",description:"Time when this channel expires as specified at creation."},sourceTag:{$ref:"tag",description:"Source tag."},destinationTag:{$ref:"tag",description:"Destination tag."},previousAffectingTransactionID:{$ref:"hash256",description:"Hash value representing the most recent transaction that affected this payment channel."},previousAffectingTransactionLedgerVersion:{$ref:"ledgerVersion",description:"The ledger version that the transaction identified by the `previousAffectingTransactionID` was validated in."}},required:["account","destination","amount","balance","settleDelay","previousAffectingTransactionID","previousAffectingTransactionLedgerVersion"],additionalProperties:!1}}},["NHnr"]);